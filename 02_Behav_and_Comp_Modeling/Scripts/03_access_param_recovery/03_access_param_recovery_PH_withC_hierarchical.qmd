---
title: "Acces parameter recovery results for PH with C model"
author: "Milena Musial"
output: html_document
date: '2024-01-31'
format: 
  html:
    embed-resources: true
    toc: true
    toc-depth: 3
    code-fold: false
    number-sections: true
    fig-width: 8
    fig-height: 6
    fig-format: svg
    editor_options: 
    chunk_output_type: console
---

# Setup

```{r}
rm(list=ls())
libs<-c("rstan", "gdata", "bayesplot", "stringr", "dplyr", "ggplot2", "PerformanceAnalytics")
sapply(libs, require, character.only=TRUE)

datapath <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/ILT_Stan_Modeling'
out_path <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/ILT_Stan_Modeling/Output'
behavpath <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/ILT_DATA'
  
# load files containing true parameters used as input for simulation
orig_file <- 'fit_n56_2024-02-29_bandit2arm_delta_PH_withC_hierarchical_group_estimation1_delta0.9_stepsize0.5.rds'
orig_fit <- readRDS(file.path(out_path, orig_file)) # Stan model output

# load simulation outout file containing y_pred and transformed parameters
sim_file <- 'sim_2024-03-06_bandit2arm_delta_PH_withC_hierarchical_group_sim.rds'
sim_fit <- readRDS(file.path(out_path, 'Parameter_Recovery', sim_file)) # Stan model output

# get file names for simulated data results
recovery_file <- 'recovery_2024-03-06_bandit2arm_delta_PH_withC_hierarchical_group.rds'
recovery_fit <- readRDS(file.path(out_path, 'Parameter_Recovery', recovery_file)) # Stan model output

color_scheme_set("mix-blue-pink")
```

```{r}
# Load true parameters

## extract posterior means for all parameters to use them as input for simulation
  
### posterior means of parameters as input for simulation
true_mu <- as.vector(summary(orig_fit, pars="mu")$summary[, c("mean")]) 

true_A_sub_m <- as.vector(summary(orig_fit, pars="A_sub_m")$summary[, c("mean")]) 
true_tau_sub_m <- as.vector(summary(orig_fit, pars="tau_sub_m")$summary[, c("mean")]) 
true_gamma_sub_m <- as.vector(summary(orig_fit, pars="gamma_sub_m")$summary[, c("mean")]) 
true_C_sub_m <- as.vector(summary(orig_fit, pars="C_sub_m")$summary[, c("mean")]) 

true_A_subj_s <- as.vector(summary(orig_fit, pars="A_subj_s")$summary[, c("mean")]) 
true_tau_subj_s <- as.vector(summary(orig_fit, pars="tau_subj_s")$summary[, c("mean")]) 
true_gamma_subj_s <- as.vector(summary(orig_fit, pars="gamma_subj_s")$summary[, c("mean")]) 
true_C_subj_s <- as.vector(summary(orig_fit, pars="C_subj_s")$summary[, c("mean")]) 

true_A_subj_raw <- as.vector(summary(orig_fit, pars="A_subj_raw")$summary[, c("mean")]) 
true_tau_subj_raw <- as.vector(summary(orig_fit, pars="tau_subj_raw")$summary[, c("mean")]) 
true_gamma_subj_raw <- as.vector(summary(orig_fit, pars="gamma_subj_raw")$summary[, c("mean")]) 
true_C_subj_raw <- as.vector(summary(orig_fit, pars="C_subj_raw")$summary[, c("mean")]) 

### transformed parameters saved during simulation
sim_posterior <- extract(sim_fit)

true_A <- as.vector(sim_posterior$A[1,,])
true_tau <- as.vector(sim_posterior$tau[1,,])
true_gamma <- as.vector(sim_posterior$gamma[1,,])
true_C <- as.vector(sim_posterior$C_const[1,,])

true_mu_A <- as.vector(sim_posterior$mu_A[1])
true_mu_tau <- as.vector(sim_posterior$mu_tau[1])
true_mu_gamma <- as.vector(sim_posterior$mu_gamma[1])
true_mu_C <- as.vector(sim_posterior$mu_C[1])

## extract parameter values based on simulated data
recovered_mu <- as.matrix(recovery_fit, pars = "mu")

recovered_A_sub_m <- as.matrix(recovery_fit, pars = "A_sub_m")
recovered_tau_sub_m <- as.matrix(recovery_fit, pars = "tau_sub_m")
recovered_gamma_sub_m <- as.matrix(recovery_fit, pars = "gamma_sub_m")
recovered_C_sub_m <- as.matrix(recovery_fit, pars = "C_sub_m")

recovered_A_subj_s <- as.matrix(recovery_fit, pars = "A_subj_s")
recovered_tau_subj_s <- as.matrix(recovery_fit, pars = "tau_subj_s")
recovered_gamma_subj_s <- as.matrix(recovery_fit, pars = "gamma_subj_s")
recovered_C_subj_s <- as.matrix(recovery_fit, pars = "C_subj_s")

recovered_A_subj_raw <- as.matrix(recovery_fit, pars = "A_subj_raw")
recovered_tau_subj_raw <- as.matrix(recovery_fit, pars = "tau_subj_raw")
recovered_gamma_subj_raw <- as.matrix(recovery_fit, pars = "gamma_subj_raw")
recovered_C_subj_raw <- as.matrix(recovery_fit, pars = "C_subj_raw")

recovered_A <- as.matrix(recovery_fit, pars = "A")
recovered_tau <- as.matrix(recovery_fit, pars = "tau")
recovered_gamma <- as.matrix(recovery_fit, pars = "gamma")
recovered_C <- as.matrix(recovery_fit, pars = "C_const")

recovered_A_mean <- as.vector(summary(recovery_fit, pars="A")$summary[, c("mean")]) 
recovered_tau_mean <- as.vector(summary(recovery_fit, pars="tau")$summary[, c("mean")]) 
recovered_gamma_mean <- as.vector(summary(recovery_fit, pars="gamma")$summary[, c("mean")]) 
recovered_C_mean <- as.vector(summary(recovery_fit, pars="C_const")$summary[, c("mean")]) 

recovered_mu_A <- as.matrix(recovery_fit, pars = "mu_A")
recovered_mu_tau <- as.matrix(recovery_fit, pars = "mu_tau")
recovered_mu_gamma <- as.matrix(recovery_fit, pars = "mu_gamma")
recovered_mu_C <- as.matrix(recovery_fit, pars = "mu_C")
```

# Recovery plots
```{r}
## Compare true and recovered parameters

# mu (raw and transformed)
mcmc_recover_intervals(recovered_mu, true_mu, prob = 0.5, prob_outer = 0.95)

mcmc_recover_intervals(recovered_mu_A, true_mu_A, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_mu_tau, true_mu_tau, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_mu_gamma, true_mu_gamma, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_mu_C, true_mu_C, prob = 0.5, prob_outer = 0.95)

# sigma
mcmc_recover_intervals(recovered_A_subj_s, true_A_subj_s, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_tau_subj_s, true_tau_subj_s, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_gamma_subj_s, true_gamma_subj_s, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_C_subj_s, true_C_subj_s, prob = 0.5, prob_outer = 0.95)

# fixed effects
mcmc_recover_intervals(recovered_A_sub_m, true_A_sub_m, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_tau_sub_m, true_tau_sub_m, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_gamma_sub_m, true_gamma_sub_m, prob = 0.5, prob_outer = 0.95)
mcmc_recover_intervals(recovered_C_sub_m, true_C_sub_m, prob = 0.5, prob_outer = 0.95)
  
```

```{r, fig.width=10, fig.height=20}

# individual distances from mu
mcmc_recover_intervals(recovered_A_subj_raw, true_A_subj_raw, prob = 0.5, prob_outer = 0.95, 
                       batch = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10), rep(5,10), rep(6,6)),
                       facet_args = list(ncol = 1))

mcmc_recover_intervals(recovered_tau_subj_raw, true_tau_subj_raw, prob = 0.5, prob_outer = 0.95, 
                       batch = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10), rep(5,10), rep(6,6)),
                       facet_args = list(ncol = 1))

mcmc_recover_intervals(recovered_gamma_subj_raw, true_gamma_subj_raw, prob = 0.5, prob_outer = 0.95, 
                       batch = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10), rep(5,10), rep(6,6)),
                       facet_args = list(ncol = 1))

mcmc_recover_intervals(recovered_C_subj_raw, true_C_subj_raw, prob = 0.5, prob_outer = 0.95, 
                       batch = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10), rep(5,10), rep(6,6)),
                       facet_args = list(ncol = 1))

# transformed individual parameters
mcmc_recover_intervals(recovered_A, true_A, prob = 0.5, prob_outer = 0.95, 
                       batch = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10), rep(5,10),
                                 rep(6,10), rep(7,10), rep(8,10), rep(9,10),
                                 rep(10,10), rep(11,10), rep(12,2)),
                       facet_args = list(ncol = 1))

mcmc_recover_intervals(recovered_tau, true_tau, prob = 0.5, prob_outer = 0.95, 
                       batch = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10), rep(5,10),
                                 rep(6,10), rep(7,10), rep(8,10), rep(9,10),
                                 rep(10,10), rep(11,10), rep(12,2)),
                       facet_args = list(ncol = 1))

mcmc_recover_intervals(recovered_gamma, true_gamma, prob = 0.5, prob_outer = 0.95, 
                       batch = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10), rep(5,10),
                                 rep(6,10), rep(7,10), rep(8,10), rep(9,10),
                                 rep(10,10), rep(11,10), rep(12,2)),
                       facet_args = list(ncol = 1))

mcmc_recover_intervals(recovered_C, true_C, prob = 0.5, prob_outer = 0.95, 
                       batch = c(rep(1,10), rep(2,10), rep(3,10), rep(4,10), rep(5,10),
                                 rep(6,10), rep(7,10), rep(8,10), rep(9,10),
                                 rep(10,10), rep(11,10), rep(12,2)),
                       facet_args = list(ncol = 1))

```

# Correlation btw. true and recovered inidivual parameters
```{r, fig.width=10, fig.height=20}
param_df <- data.frame(true_A,true_tau,true_gamma,true_C,recovered_A_mean,recovered_tau_mean,recovered_gamma_mean,recovered_C_mean)
cor(param_df)
chart.Correlation(param_df, histogram=TRUE, pch=19)
```
