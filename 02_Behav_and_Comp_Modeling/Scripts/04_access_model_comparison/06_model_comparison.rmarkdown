---
title: "Bayesian model comparison"
author: "Milena Musial"
output: html_document
date: '2024-03-01'
format: 
  html:
    embed-resources: true
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
    fig-width: 8
    fig-height: 6
    fig-format: svg
    editor_options: 
    chunk_output_type: console
---


# Setup


```{r}
rm(list=ls())
libs<-c("rstan", "gdata", "bayesplot", "stringr", "dplyr", "ggplot2", "loo", "hBayesDM", "tidyr")
sapply(libs, require, character.only=TRUE)

datapath <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/WP2_ILT_CODE/02_Behav_and_Comp_Modeling'
out_path <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/WP2_ILT_CODE/02_Behav_and_Comp_Modeling/Output'
behavpath <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/ILT_DATA'

cbPalette <- c( "#0072B2", "#D55E00", "#009E73", "#CC79A7",
                "#F0E442", "#56B4E9", "#999999", "#E69F00")

```


# Step 1: Comparison of random-intercept models

## Load Stan fit files

```{r}
# stan input non-hierarchical
stan_data <- load(file.path(behavpath,"Input/stan_data_bandit2arm_delta_PH_withC_n58.RData"))

# stan input hierarchical
stan_data_hierarchical <- load(file.path(behavpath,"Input/stan_data_bandit2arm_delta_PH_withC_hierarchical_group_n58.RData"))

fit_file_main <- 'fit_n58_2024-04-12_bandit2arm_delta_main_estimation1_delta0.9_stepsize0.5.rds'
fit_file_main_DU <- 'fit_n58_2024-04-12_bandit2arm_delta_main_DU_estimation1_delta0.99_stepsize0.1.rds'
fit_file_PH_withC <- 'fit_n58_2024-05-07_bandit2arm_delta_PH_withC_DU_estimation1_delta0.999_stepsize0.1_treedepth12.rds'
#fit_file_PH_withC_DU <- 'fit_n58_2024-04-12_bandit2arm_delta_PH_withC_DU_estimation1_delta0.99_stepsize0.1.rds'

fit_main <- readRDS(file.path(out_path, fit_file_main))
fit_main_DU <- readRDS(file.path(out_path, fit_file_main_DU))
fit_PH_withC <- readRDS(file.path(out_path, fit_file_PH_withC))
#fit_PH_withC_DU <- readRDS(file.path(out_path, fit_file_PH_withC_DU))
```


## Extract log likelihood

```{r}
# extract log likelihood for each choice
log_likelihood_main <- extract_log_lik(fit_main, parameter_name = "log_lik", merge_chains = T)
log_likelihood_main_DU <- extract_log_lik(fit_main_DU, parameter_name = "log_lik", merge_chains = T)
log_likelihood_PH_withC <- extract_log_lik(fit_PH_withC, parameter_name = "log_lik", merge_chains = T)
#log_likelihood_PH_withC_DU <- extract_log_lik(fit_PH_withC_DU, parameter_name = "log_lik", merge_chains = T)

# create logical vector coding if a column should be included in log_likelihood
x <- logical(stan_data$T) # create vector containing total number of trials * FALSE
a <- c(stan_data$N+1:(stan_data$N*49)) 
x[a] <- TRUE # set logical value to TRUE if index in a

# exclude 1st trial per subject as likelihood is identical and hinders loo estimation (causes Inf pareto k values)
log_likelihood_main <- log_likelihood_main[,x] 
log_likelihood_main_DU <- log_likelihood_main_DU[,x]
log_likelihood_PH_withC <- log_likelihood_PH_withC[,x] 
  
# exclude missing trials
log_likelihood_main <- log_likelihood_main[,log_likelihood_main[1,]!=-999]
log_likelihood_main_DU <- log_likelihood_main_DU[,log_likelihood_main_DU[1,]!=-999]
log_likelihood_PH_withC <- log_likelihood_PH_withC[,log_likelihood_PH_withC[1,]!=-999]
#log_likelihood_PH_withC_DU <- log_likelihood_PH_withC_DU[,log_likelihood_PH_withC_DU[1,]!=-999]
```


## Fit per model

```{r}
loo_main <- loo(log_likelihood_main)
print(loo_main)
plot(loo_main)

if (any(pareto_k_values(loo_main) > 0.7)) {
  loo_main_clean <- loo(log_likelihood_main, k_threshold = 0.7)
  print(loo_main_clean)
  plot(loo_main_clean)
}

loo_main_DU <- loo(log_likelihood_main_DU)
print(loo_main_DU)
plot(loo_main_DU)

if (any(pareto_k_values(loo_main_DU) > 0.7)) {
  loo_main_DU_clean <- loo(log_likelihood_main_DU, k_threshold = 0.7)
  print(loo_main_DU_clean)
  plot(loo_main_DU_clean)
}

loo_PH_withC <- loo(log_likelihood_PH_withC)
print(loo_PH_withC)
plot(loo_PH_withC)

if (any(pareto_k_values(loo_PH_withC) > 0.7)) {
  loo_PH_withC_clean <- loo(log_likelihood_PH_withC, k_threshold = 0.7)
  print(loo_PH_withC_clean)
  plot(loo_PH_withC_clean)
}

# loo_PH_withC_DU <- loo(log_likelihood_PH_withC_DU)
# print(loo_PH_withC_DU)
# plot(loo_PH_withC_DU)
# 
# if (any(pareto_k_values(loo_PH_withC_DU) > 0.7)) {
#   loo_PH_withC_DU_clean <- loo(log_likelihood_PH_withC_DU, k_threshold = 0.7)
#   print(loo_PH_withC_DU_clean)
#   plot(loo_PH_withC_DU_clean)
# }

```


## Model comparison

```{r}
#comp <- loo_compare(loo_main_clean, loo_main_DU_clean, loo_PH_withC_clean, loo_PH_withC_DU_clean)
comp <- loo_compare(loo_main_clean, loo_main_DU_clean, loo_PH_withC_clean)
print(comp, digits = 3)
```


## High pareto k-values: Try 10-fold CV instead

```{r}
# Load log_pd_kfold for different models
log_pd_main <- readRDS(file.path(out_path, "log_pd_kfold_bandit2arm_delta_main_n58.rds"))
log_pd_main_DU <- readRDS(file.path(out_path, "log_pd_kfold_bandit2arm_delta_main_DU_n58.rds"))
log_pd_PH_withC <- readRDS(file.path(out_path, "log_pd_kfold_bandit2arm_delta_PH_withC_n58.rds"))
#env_PH_withC_DU <- new.env()
#log_pd_PH_withC_DU <- load(file.path(out_path, "log_pd_kfold_bandit2arm_delta_PH_withC_DU_n58.RData"),env_PH_withC_DU)[1]

# exclude 1st trial per subject as likelihood is identical and hinders loo estimation (causes Inf pareto k values)
log_pd_main <- log_pd_main[,x] 
log_pd_main_DU <- log_pd_main_DU[,x]
log_pd_PH_withC <- log_pd_PH_withC[,x] 
  
# exclude missing trials
log_pd_main <- log_pd_main[,log_pd_main[1,]!=-999]
log_pd_main_DU <- log_pd_main_DU[,log_pd_main_DU[1,]!=-999]
log_pd_PH_withC <- log_pd_PH_withC[,log_pd_PH_withC[1,]!=-999]
#log_pd_PH_withC_DU <- log_pd_PH_withC_DU[,log_pd_PH_withC_DU[1,]!=-999]
```


### Fit per model

```{r}
elpd_kfold_main <- elpd(log_pd_main)
elpd_kfold_main_DU <- elpd(log_pd_main_DU)
elpd_kfold_PH_withC <- elpd(log_pd_PH_withC)
#elpd_kfold_PH_withC_DU <- elpd(elog_pd_PH_withC_DU)

print(elpd_kfold_main)
print(elpd_kfold_main_DU)
print(elpd_kfold_PH_withC)
#print(elpd_kfold_PH_withC_DU)
```


### Model comparison

```{r}
#comp2 <- loo_compare(env_main[[elpd_main]], env_main_DU[[elpd_main_DU]], env_PH_withC[[elpd_PH_withC]], env_PH_withC[[elpd_PH_withC_DU]])
comp2 <- loo_compare(elpd_kfold_main, elpd_kfold_main_DU, elpd_kfold_PH_withC)
print(comp2, digits = 3)
```


# Step 2: Compare PH withC with different hierarchical structures

## Load Stan fit file

```{r}
fit_file_PH_withC_hierarchical_group <- 'fit_n58_2024-04-12_bandit2arm_delta_PH_withC_hierarchical_group_estimation1_delta0.9_stepsize0.5.rds'

fit_PH_withC_hierarchical_group <- readRDS(file.path(out_path, fit_file_PH_withC_hierarchical_group))
```


## Extract log likelihood

```{r}
# extract log likelihood for each choice
log_likelihood_PH_withC_hierarchical_group <- extract_log_lik(fit_PH_withC_hierarchical_group, parameter_name = "log_lik", merge_chains = T)

# create logical vector coding if a column should be included in log_likelihood
x <- logical(stan_data$T) # create vector containing total number of trials * FALSE
a <- c(stan_data$N+1:(stan_data$N*49)) 
b <- c(stan_data$N*50+stan_data$N+1:(stan_data$N*49))
c <- c(a,b) # concatenate both number vectors
x[c] <- TRUE # set logical value to TRUE if index in c

# exclude 1st trial per subject as likelihood is identical and hinders loo estimation (causes Inf pareto k values)
log_likelihood_PH_withC_hierarchical_group <- log_likelihood_PH_withC_hierarchical_group[,x] 

# exclude missing trials
log_likelihood_PH_withC_hierarchical_group <- log_likelihood_PH_withC_hierarchical_group[,log_likelihood_PH_withC_hierarchical_group[1,]!=-999]
```


## Fit per model

```{r}
loo_PH_withC_hierarchical_group <- loo(log_likelihood_PH_withC_hierarchical_group)
print(loo_PH_withC_hierarchical_group)
plot(loo_PH_withC)

if (any(pareto_k_values(loo_PH_withC_hierarchical_group) > 0.7)) {
  loo_PH_withC_hierarchical_group_clean <- loo(log_likelihood_PH_withC_hierarchical_group, k_threshold = 0.7)
  print(loo_PH_withC_hierarchical_group_clean)
  plot(loo_PH_withC_clean)
}
```


## Model comparison

```{r}
comp3 <- loo_compare(loo_PH_withC_clean, loo_PH_withC_hierarchical_group_clean)
print(comp3, digits = 3)
```


## High pareto k-values: Try 10-fold CV instead

```{r}
# Load log_pd for model with fixed effect for group
log_pd_PH_withC_hierarchical_group <- readRDS(file.path(out_path, "log_pd_kfold_bandit2arm_delta_PH_withC_hierarchical_group_n58.rds"))

# exclude 1st trial per subject as likelihood is identical and hinders loo estimation (causes Inf pareto k values)
log_pd_PH_withC_hierarchical_group <- log_pd_PH_withC_hierarchical_group[,x] 

# exclude missing trials
log_pd_PH_withC_hierarchical_group <- log_pd_PH_withC_hierarchical_group[,log_pd_PH_withC_hierarchical_group[1,]!=-999]
```


### Fit per model

```{r}
elpd_kfold_PH_withC_hierarchical_group <- elpd(log_pd_PH_withC_hierarchical_group)
```


### Model comparison

```{r}
comp4 <- loo_compare(elpd_PH_withC, elpd_PH_withC_hierarchical_group)
print(comp4, digits = 3)
```

