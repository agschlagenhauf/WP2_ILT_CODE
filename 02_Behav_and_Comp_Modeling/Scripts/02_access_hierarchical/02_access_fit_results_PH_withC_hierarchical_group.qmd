---
title: "Acces Hierarchical Pearce-Hall with C Group Model Results"
author: "Milena Musial"
output: html_document
date: '2023-09-24'
format: 
  html:
    embed-resources: true
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
    fig-width: 8
    fig-height: 6
    fig-format: svg
    editor_options: 
    chunk_output_type: console
---

# Setup

```{r}
###### define sample #####

rm(list=ls())

sample <- "n58" # n71, n53, n50

###### define non-warm-up iterations #####

niterations <- 36000
```

```{r}
libs<-c("rstan", "gdata", "bayesplot", "stringr", "dplyr", "ggplot2", "loo", "posterior", "reliabilitydiag")
sapply(libs, require, character.only=TRUE)

datapath <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/WP2_ILT_CODE/02_Behav_and_Comp_Modeling'
out_path <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/WP2_ILT_CODE/02_Behav_and_Comp_Modeling/Output'
behavpath <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/ILT_DATA'

fit_file <- 'fit_n58_2024-04-12_bandit2arm_delta_PH_withC_hierarchical_group_estimation1_delta0.9_stepsize0.5.rds'

fit <- readRDS(file.path(out_path, fit_file)) # Stan model output

if (sample == 'n71') {
  load(file.path(behavpath,"Behav/behav_final_redcap_n71.RData")) # Behav and redcap data
  load(file.path(behavpath,"Input/stan_data_bandit2arm_delta_PH_withC_hierarchical_group_n71.RData")) # stan_data
} else if (sample == 'n58') {
  load(file.path(behavpath,"Behav/behav_final_redcap_n58.RData")) # Behav and redcap data
  load(file.path(behavpath,"Input/stan_data_bandit2arm_delta_PH_withC_hierarchical_group_n58.RData")) # stan_data
} else if (sample == 'n56') {
  load(file.path(behavpath,"Behav/behav_final_redcap_n56.RData")) # Behav and redcap data
  load(file.path(behavpath,"Input/stan_data_bandit2arm_delta_PH_withC_hierarchical_group_n56.RData")) # stan_data
}

color_scheme_set("mix-blue-pink")
```

Load data from prior predictive checks (estimation==0) or from model fitting (estimation==1)?
```{r}
estimation <- 1
```

# Convergence / sampler diagnostics

## Summary statistics for parameters

### Across chains

```{r}
fit_sum <- summary(fit)

# overall summary
print(fit_sum$summary[,9:10])
```

-   All `Rhat` values are \< 1.01, meaning that chains have converged! \`

-   All `n_eff` (measure of the effective sample size) are \> 1/100th (360) or 1/1000th (36) of number of iterations (3600). Anything over an `n_eff` of 100 is usually "fine"

## Bulk effective sample size

```{r}
if (estimation==1) {
  # extract posterior draws
  posterior_mat <- extract(fit, permuted = F)
  
  # define parameter names
  parameter_names <- c("mu[1]", "A_sub_m[1]", "A_subj_s", "A_subj_raw[20]",
                      "A[20,1]", "A[20,2]", "A_normal[20,1]", "A_normal[20,2]",
                      "A_vars[20]", "mu_A",
                      "mu[2]", "tau_sub_m[1]", "tau_subj_s", "tau_subj_raw[20]",
                      "tau[20,1]", "tau[20,2]", "tau_normal[20,1]", "tau_normal[20,2]",
                      "tau_vars[20]", "mu_tau",
                      "mu[3]", "gamma_sub_m[1]", "gamma_subj_s", "gamma_subj_raw[20]",
                      "gamma[20,1]", "gamma[20,2]", "gamma_normal[20,1]", "gamma_normal[20,2]",
                      "gamma_vars[20]", "mu_gamma",
                      "mu[4]", "C_sub_m[1]", "C_subj_s", "C_subj_raw[20]",
                      "C_const[20,1]", "C_const[20,2]", "C_normal[20,1]", "C_normal[20,2]",
                      "C_vars[20]", "mu_C")
  
  # create vector for bulk ess and fill them up iteratively
  bulk_neff <- c()
  
  for (par in parameter_names) {
    par_mat <- extract_variable_matrix(posterior_mat, variable = par)
    bulk_neff <- append(bulk_neff,ess_bulk(par_mat))
  }
  
  print(min(bulk_neff))
  
  ess_df <- data.frame(parameter_names,bulk_neff)
  print(ess_df)
  
}
```

## Traceplots of model parameters

```{r}
traceplot(fit, pars=c("mu[1]", "A_sub_m[1]", "A_subj_s", "A_subj_raw[20]",
                      "A[20,1]", "A[20,2]", "A_normal[20,1]", "A_normal[20,2]",
                      "A_vars[20]", "mu_A"), inc_warmup=T)

traceplot(fit, pars=c("mu[2]", "tau_sub_m[1]", "tau_subj_s", "tau_subj_raw[20]",
                      "tau[20,1]", "tau[20,2]", "tau_normal[20,1]", "tau_normal[20,2]",
                      "tau_vars[20]", "mu_tau"), inc_warmup=T)

traceplot(fit, pars=c("mu[3]", "gamma_sub_m[1]", "gamma_subj_s", "gamma_subj_raw[20]",
                      "gamma[20,1]", "gamma[20,2]", "gamma_normal[20,1]", "gamma_normal[20,2]",
                      "gamma_vars[20]", "mu_gamma"), inc_warmup=T)

traceplot(fit, pars=c("mu[4]", "C_sub_m[1]", "C_subj_s", "C_subj_raw[20]",
                      "C_const[20,1]", "C_const[20,2]", "C_normal[20,1]", "C_normal[20,2]",
                      "C_vars[20]", "mu_C"), inc_warmup=T)
```

Chains mix nicely.

## Acceptance rate and tree depth per chain

```{r}
sampler_params<- get_sampler_params(fit, inc_warmup=FALSE)

mean_accept_stat_by_chain<-sapply(sampler_params, function(x) mean(x[, "accept_stat__"]))
print(mean_accept_stat_by_chain)

max_treedepth_by_chain <- sapply(sampler_params, function(x) max(x[, "treedepth__"]))
print(max_treedepth_by_chain)
```

# Model fit (Log Likelihood)

## Per trial

```{r}
if (estimation==1) {
  # extract log likelihood for each choice
  log_likelihood <- extract_log_lik(fit, parameter_name = "log_lik", merge_chains = TRUE)
  
  # create logical vector coding if a column should be included in log_likelihood
  x <- logical(stan_data$T) # create vector containing total number of trials * FALSE
  a <- c(stan_data$N+1:(stan_data$N*49)) # vector with number from 1 to 71 subjects * 44 trials (for cond. 1)
  b <- c(stan_data$N*50+stan_data$N+1:(stan_data$N*49)) # vector with numbers from 71 subjects * 50 trials + 1 to 71 subjects * 94 trials (for cond. 2)
  c <- c(a,b) # concatenate both number vectors
  x[c] <- TRUE # set logical value to TRUE if index in c
  
  # exclude 1st trial per subject as likelihood is identical and hinders loo estimation (causes Inf pareto k values)
  log_likelihood <- log_likelihood[,x] # include only trials 1:44 for each subject and reinforcer_type

  # exclude missing trials
  log_likelihood <- log_likelihood[,log_likelihood[1,]!=-999]
  
  # save for model comparison
  write.table(log_likelihood, file=file.path(out_path, 'log_lik_PH_withC_hierarchical.txt'), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = F)

  # print and plot loo
  loo1 <- loo(log_likelihood)
  print(loo1)
  plot(loo1, label_points = TRUE)
  
  waic1 <- waic(log_likelihood)
  print(waic1)
}
```

## Per block

```{r}
if (estimation==1) {
  # extract log likelihood for each choice
  log_likelihood_b <- extract_log_lik(fit, parameter_name = "log_lik_s_b", merge_chains = TRUE)
  
  # save for model comparison
  # write.table(log_likelihood, file=file.path(out_path, 'log_lik_b_PH_withC_hierarchical.txt'), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = F)

  # print and plot loo
  loo2 <- loo(log_likelihood_b)
  print(loo2)
  plot(loo2, label_points = TRUE)
  
  waic2 <- waic(log_likelihood_b)
  print(waic2)
}
```

## Per subject 

```{r}
if (estimation==1) {
  # extract log likelihood for each choice
  log_likelihood_s <- extract_log_lik(fit, parameter_name = "log_lik_s", merge_chains = TRUE)
  
  # save for model comparison
  # write.table(log_likelihood, file=file.path(out_path, 'log_lik_s_PH_withC_hierarchical.txt'), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = F)

  # print and plot loo
  loo3 <- loo(log_likelihood_s)
  print(loo3)
  plot(loo3, label_points = TRUE)
  
  waic3 <- waic(log_likelihood_s)
  print(waic3)
}
```

# Inspect posteriors

## Posterior densities & histograms

### Directly estimated parameters

```{r, fig.width=10, fig.height=20}
stan_hist(fit, pars=c("mu[1]", "A_sub_m[1]", "A_subj_s", "A_subj_raw[1]", "A_subj_raw[2]", "A_subj_raw[3]", "A_subj_raw[4]", "A_subj_raw[5]", "A_subj_raw[6]", "A_subj_raw[7]", "A_subj_raw[8]", "A_subj_raw[9]", "A_subj_raw[10]", "A_subj_raw[11]", "A_subj_raw[12]", "A_subj_raw[13]", "A_subj_raw[14]", "A_subj_raw[15]", "A_subj_raw[16]", "A_subj_raw[17]", "A_subj_raw[18]", "A_subj_raw[19]", "A_subj_raw[20]", "A_subj_raw[21]", "A_subj_raw[22]", "A_subj_raw[23]", "A_subj_raw[24]", "A_subj_raw[25]", "A_subj_raw[26]", "A_subj_raw[27]", "A_subj_raw[28]", "A_subj_raw[29]", "A_subj_raw[30]", "A_subj_raw[31]", "A_subj_raw[32]", "A_subj_raw[33]", "A_subj_raw[34]", "A_subj_raw[35]", "A_subj_raw[36]", "A_subj_raw[37]", "A_subj_raw[38]", "A_subj_raw[39]", "A_subj_raw[40]", "A_subj_raw[41]", "A_subj_raw[42]", "A_subj_raw[43]", "A_subj_raw[44]", "A_subj_raw[45]", "A_subj_raw[46]", "A_subj_raw[47]", "A_subj_raw[48]", "A_subj_raw[49]", "A_subj_raw[50]", "A_subj_raw[51]", "A_subj_raw[52]", "A_subj_raw[53]", "A_subj_raw[54]", "A_subj_raw[55]", "A_subj_raw[56]", "A_subj_raw[57]", "A_subj_raw[58]"))

stan_hist(fit, pars=c("mu[2]", "tau_sub_m[1]", "tau_subj_s", "tau_subj_raw[1]", "tau_subj_raw[2]", "tau_subj_raw[3]", "tau_subj_raw[4]", "tau_subj_raw[5]", "tau_subj_raw[6]", "tau_subj_raw[7]", "tau_subj_raw[8]", "tau_subj_raw[9]", "tau_subj_raw[10]", "tau_subj_raw[11]", "tau_subj_raw[12]", "tau_subj_raw[13]", "tau_subj_raw[14]", "tau_subj_raw[15]", "tau_subj_raw[16]", "tau_subj_raw[17]", "tau_subj_raw[18]", "tau_subj_raw[19]", "tau_subj_raw[20]", "tau_subj_raw[21]", "tau_subj_raw[22]", "tau_subj_raw[23]", "tau_subj_raw[24]", "tau_subj_raw[25]", "tau_subj_raw[26]", "tau_subj_raw[27]", "tau_subj_raw[28]", "tau_subj_raw[29]", "tau_subj_raw[30]", "tau_subj_raw[31]", "tau_subj_raw[32]", "tau_subj_raw[33]", "tau_subj_raw[34]", "tau_subj_raw[35]", "tau_subj_raw[36]", "tau_subj_raw[37]", "tau_subj_raw[38]", "tau_subj_raw[39]", "tau_subj_raw[40]", "tau_subj_raw[41]", "tau_subj_raw[42]", "tau_subj_raw[43]", "tau_subj_raw[44]", "tau_subj_raw[45]", "tau_subj_raw[46]", "tau_subj_raw[47]", "tau_subj_raw[48]", "tau_subj_raw[49]", "tau_subj_raw[50]", "tau_subj_raw[51]", "tau_subj_raw[52]", "tau_subj_raw[53]", "tau_subj_raw[54]", "tau_subj_raw[55]", "tau_subj_raw[56]", "tau_subj_raw[57]", "tau_subj_raw[58]"))

stan_hist(fit, pars=c("mu[3]", "gamma_sub_m[1]", "gamma_subj_s", "gamma_subj_raw[1]", "gamma_subj_raw[2]", "gamma_subj_raw[3]", "gamma_subj_raw[4]", "gamma_subj_raw[5]", "gamma_subj_raw[6]", "gamma_subj_raw[7]", "gamma_subj_raw[8]", "gamma_subj_raw[9]", "gamma_subj_raw[10]", "gamma_subj_raw[11]", "gamma_subj_raw[12]", "gamma_subj_raw[13]", "gamma_subj_raw[14]", "gamma_subj_raw[15]", "gamma_subj_raw[16]", "gamma_subj_raw[17]", "gamma_subj_raw[18]", "gamma_subj_raw[19]", "gamma_subj_raw[20]", "gamma_subj_raw[21]", "gamma_subj_raw[22]", "gamma_subj_raw[23]", "gamma_subj_raw[24]", "gamma_subj_raw[25]", "gamma_subj_raw[26]", "gamma_subj_raw[27]", "gamma_subj_raw[28]", "gamma_subj_raw[29]", "gamma_subj_raw[30]", "gamma_subj_raw[31]", "gamma_subj_raw[32]", "gamma_subj_raw[33]", "gamma_subj_raw[34]", "gamma_subj_raw[35]", "gamma_subj_raw[36]", "gamma_subj_raw[37]", "gamma_subj_raw[38]", "gamma_subj_raw[39]", "gamma_subj_raw[40]", "gamma_subj_raw[41]", "gamma_subj_raw[42]", "gamma_subj_raw[43]", "gamma_subj_raw[44]", "gamma_subj_raw[45]", "gamma_subj_raw[46]", "gamma_subj_raw[47]", "gamma_subj_raw[48]", "gamma_subj_raw[49]", "gamma_subj_raw[50]", "gamma_subj_raw[51]", "gamma_subj_raw[52]", "gamma_subj_raw[53]", "gamma_subj_raw[54]", "gamma_subj_raw[55]", "gamma_subj_raw[56]", "gamma_subj_raw[57]", "gamma_subj_raw[58]"))
          
stan_hist(fit, pars=c("mu[4]", "C_sub_m[1]", "C_subj_s", "C_subj_raw[1]", "C_subj_raw[2]", "C_subj_raw[3]", "C_subj_raw[4]", "C_subj_raw[5]", "C_subj_raw[6]", "C_subj_raw[7]", "C_subj_raw[8]", "C_subj_raw[9]", "C_subj_raw[10]", "C_subj_raw[11]", "C_subj_raw[12]", "C_subj_raw[13]", "C_subj_raw[14]", "C_subj_raw[15]", "C_subj_raw[16]", "C_subj_raw[17]", "C_subj_raw[18]", "C_subj_raw[19]", "C_subj_raw[20]", "C_subj_raw[21]", "C_subj_raw[22]", "C_subj_raw[23]", "C_subj_raw[24]", "C_subj_raw[25]", "C_subj_raw[26]", "C_subj_raw[27]", "C_subj_raw[28]", "C_subj_raw[29]", "C_subj_raw[30]", "C_subj_raw[31]", "C_subj_raw[32]", "C_subj_raw[33]", "C_subj_raw[34]", "C_subj_raw[35]", "C_subj_raw[36]", "C_subj_raw[37]", "C_subj_raw[38]", "C_subj_raw[39]", "C_subj_raw[40]", "C_subj_raw[41]", "C_subj_raw[42]", "C_subj_raw[43]", "C_subj_raw[44]", "C_subj_raw[45]", "C_subj_raw[46]", "C_subj_raw[47]", "C_subj_raw[48]", "C_subj_raw[49]", "C_subj_raw[50]", "C_subj_raw[51]", "C_subj_raw[52]", "C_subj_raw[53]", "C_subj_raw[54]", "C_subj_raw[55]", "C_subj_raw[56]", "C_subj_raw[57]", "C_subj_raw[58]"))

```

### Transformed parameters

```{r, fig.width=10, fig.height=20}
stan_hist(fit, pars=c("mu_A", "A[1,1]", "A[1,2]", "A[2,1]", "A[2,2]", "A[3,1]", "A[3,2]", "A[4,1]", "A[4,2]", "A[5,1]", "A[5,2]", "A[6,1]", "A[6,2]", "A[7,1]", "A[7,2]", "A[8,1]", "A[8,2]", "A[9,1]", "A[9,2]", "A[10,1]", "A[10,2]", "A[11,1]", "A[11,2]", "A[12,1]", "A[12,2]", "A[13,1]", "A[13,2]", "A[14,1]", "A[14,2]", "A[15,1]", "A[15,2]", "A[16,1]", "A[16,2]", "A[17,1]", "A[17,2]", "A[18,1]", "A[18,2]", "A[19,1]", "A[19,2]", "A[20,1]", "A[20,2]", "A[21,1]", "A[21,2]", "A[22,1]", "A[22,2]", "A[23,1]", "A[23,2]", "A[24,1]", "A[24,2]", "A[25,1]", "A[25,2]", "A[26,1]", "A[26,2]", "A[27,1]", "A[27,2]", "A[28,1]", "A[28,2]", "A[29,1]", "A[29,2]", "A[30,1]", "A[30,2]", "A[31,1]", "A[31,2]", "A[32,1]", "A[32,2]", "A[33,1]", "A[33,2]", "A[34,1]", "A[34,2]", "A[35,1]", "A[35,2]", "A[36,1]", "A[36,2]", "A[37,1]", "A[37,2]", "A[38,1]", "A[38,2]", "A[39,1]", "A[39,2]", "A[40,1]", "A[40,2]", "A[41,1]", "A[41,2]", "A[42,1]", "A[42,2]", "A[43,1]", "A[43,2]", "A[44,1]", "A[44,2]", "A[45,1]", "A[45,2]", "A[46,1]", "A[46,2]", "A[47,1]", "A[47,2]", "A[48,1]", "A[48,2]", "A[49,1]", "A[49,2]", "A[50,1]", "A[50,2]", "A[51,1]", "A[51,2]", "A[52,1]", "A[52,2]", "A[53,1]", "A[53,2]", "A[54,1]", "A[54,2]", "A[55,1]", "A[55,2]", "A[56,1]", "A[56,2]", "A[57,1]", "A[57,2]", "A[58,1]", "A[58,2]"))
          
stan_hist(fit, pars=c("mu_tau", "tau[1,1]", "tau[1,2]", "tau[2,1]", "tau[2,2]", "tau[3,1]", "tau[3,2]", "tau[4,1]", "tau[4,2]", "tau[5,1]", "tau[5,2]", "tau[6,1]", "tau[6,2]", "tau[7,1]", "tau[7,2]", "tau[8,1]", "tau[8,2]", "tau[9,1]", "tau[9,2]", "tau[10,1]", "tau[10,2]", "tau[11,1]", "tau[11,2]", "tau[12,1]", "tau[12,2]", "tau[13,1]", "tau[13,2]", "tau[14,1]", "tau[14,2]", "tau[15,1]", "tau[15,2]", "tau[16,1]", "tau[16,2]", "tau[17,1]", "tau[17,2]", "tau[18,1]", "tau[18,2]", "tau[19,1]", "tau[19,2]", "tau[20,1]", "tau[20,2]", "tau[21,1]", "tau[21,2]", "tau[22,1]", "tau[22,2]", "tau[23,1]", "tau[23,2]", "tau[24,1]", "tau[24,2]", "tau[25,1]", "tau[25,2]", "tau[26,1]", "tau[26,2]", "tau[27,1]", "tau[27,2]", "tau[28,1]", "tau[28,2]", "tau[29,1]", "tau[29,2]", "tau[30,1]", "tau[30,2]", "tau[31,1]", "tau[31,2]", "tau[32,1]", "tau[32,2]", "tau[33,1]", "tau[33,2]", "tau[34,1]", "tau[34,2]", "tau[35,1]", "tau[35,2]", "tau[36,1]", "tau[36,2]", "tau[37,1]", "tau[37,2]", "tau[38,1]", "tau[38,2]", "tau[39,1]", "tau[39,2]", "tau[40,1]", "tau[40,2]", "tau[41,1]", "tau[41,2]", "tau[42,1]", "tau[42,2]", "tau[43,1]", "tau[43,2]", "tau[44,1]", "tau[44,2]", "tau[45,1]", "tau[45,2]", "tau[46,1]", "tau[46,2]", "tau[47,1]", "tau[47,2]", "tau[48,1]", "tau[48,2]", "tau[49,1]", "tau[49,2]", "tau[50,1]", "tau[50,2]", "tau[51,1]", "tau[51,2]", "tau[52,1]", "tau[52,2]", "tau[53,1]", "tau[53,2]", "tau[54,1]", "tau[54,2]", "tau[55,1]", "tau[55,2]", "tau[56,1]", "tau[56,2]", "tau[57,1]", "tau[57,2]", "tau[58,1]", "tau[58,2]"))

stan_hist(fit, pars=c("mu_gamma", "gamma[1,1]", "gamma[1,2]", "gamma[2,1]", "gamma[2,2]", "gamma[3,1]", "gamma[3,2]", "gamma[4,1]", "gamma[4,2]", "gamma[5,1]", "gamma[5,2]", "gamma[6,1]", "gamma[6,2]", "gamma[7,1]", "gamma[7,2]", "gamma[8,1]", "gamma[8,2]", "gamma[9,1]", "gamma[9,2]", "gamma[10,1]", "gamma[10,2]", "gamma[11,1]", "gamma[11,2]", "gamma[12,1]", "gamma[12,2]", "gamma[13,1]", "gamma[13,2]", "gamma[14,1]", "gamma[14,2]", "gamma[15,1]", "gamma[15,2]", "gamma[16,1]", "gamma[16,2]", "gamma[17,1]", "gamma[17,2]", "gamma[18,1]", "gamma[18,2]", "gamma[19,1]", "gamma[19,2]", "gamma[20,1]", "gamma[20,2]", "gamma[21,1]", "gamma[21,2]", "gamma[22,1]", "gamma[22,2]", "gamma[23,1]", "gamma[23,2]", "gamma[24,1]", "gamma[24,2]", "gamma[25,1]", "gamma[25,2]", "gamma[26,1]", "gamma[26,2]", "gamma[27,1]", "gamma[27,2]", "gamma[28,1]", "gamma[28,2]", "gamma[29,1]", "gamma[29,2]", "gamma[30,1]", "gamma[30,2]", "gamma[31,1]", "gamma[31,2]", "gamma[32,1]", "gamma[32,2]", "gamma[33,1]", "gamma[33,2]", "gamma[34,1]", "gamma[34,2]", "gamma[35,1]", "gamma[35,2]", "gamma[36,1]", "gamma[36,2]", "gamma[37,1]", "gamma[37,2]", "gamma[38,1]", "gamma[38,2]", "gamma[39,1]", "gamma[39,2]", "gamma[40,1]", "gamma[40,2]", "gamma[41,1]", "gamma[41,2]", "gamma[42,1]", "gamma[42,2]", "gamma[43,1]", "gamma[43,2]", "gamma[44,1]", "gamma[44,2]", "gamma[45,1]", "gamma[45,2]", "gamma[46,1]", "gamma[46,2]", "gamma[47,1]", "gamma[47,2]", "gamma[48,1]", "gamma[48,2]", "gamma[49,1]", "gamma[49,2]", "gamma[50,1]", "gamma[50,2]", "gamma[51,1]", "gamma[51,2]", "gamma[52,1]", "gamma[52,2]", "gamma[53,1]", "gamma[53,2]", "gamma[54,1]", "gamma[54,2]", "gamma[55,1]", "gamma[55,2]", "gamma[56,1]", "gamma[56,2]", "gamma[57,1]", "gamma[57,2]", "gamma[58,1]", "gamma[58,2]"))

stan_hist(fit, pars=c("mu_C", "C_const[1,1]", "C_const[1,2]", "C_const[2,1]", "C_const[2,2]", "C_const[3,1]", "C_const[3,2]", "C_const[4,1]", "C_const[4,2]", "C_const[5,1]", "C_const[5,2]", "C_const[6,1]", "C_const[6,2]", "C_const[7,1]", "C_const[7,2]", "C_const[8,1]", "C_const[8,2]", "C_const[9,1]", "C_const[9,2]", "C_const[10,1]", "C_const[10,2]", "C_const[11,1]", "C_const[11,2]", "C_const[12,1]", "C_const[12,2]", "C_const[13,1]", "C_const[13,2]", "C_const[14,1]", "C_const[14,2]", "C_const[15,1]", "C_const[15,2]", "C_const[16,1]", "C_const[16,2]", "C_const[17,1]", "C_const[17,2]", "C_const[18,1]", "C_const[18,2]", "C_const[19,1]", "C_const[19,2]", "C_const[20,1]", "C_const[20,2]", "C_const[21,1]", "C_const[21,2]", "C_const[22,1]", "C_const[22,2]", "C_const[23,1]", "C_const[23,2]", "C_const[24,1]", "C_const[24,2]", "C_const[25,1]", "C_const[25,2]", "C_const[26,1]", "C_const[26,2]", "C_const[27,1]", "C_const[27,2]", "C_const[28,1]", "C_const[28,2]", "C_const[29,1]", "C_const[29,2]", "C_const[30,1]", "C_const[30,2]", "C_const[31,1]", "C_const[31,2]", "C_const[32,1]", "C_const[32,2]", "C_const[33,1]", "C_const[33,2]", "C_const[34,1]", "C_const[34,2]", "C_const[35,1]", "C_const[35,2]", "C_const[36,1]", "C_const[36,2]", "C_const[37,1]", "C_const[37,2]", "C_const[38,1]", "C_const[38,2]", "C_const[39,1]", "C_const[39,2]", "C_const[40,1]", "C_const[40,2]", "C_const[41,1]", "C_const[41,2]", "C_const[42,1]", "C_const[42,2]", "C_const[43,1]", "C_const[43,2]", "C_const[44,1]", "C_const[44,2]", "C_const[45,1]", "C_const[45,2]", "C_const[46,1]", "C_const[46,2]", "C_const[47,1]", "C_const[47,2]", "C_const[48,1]", "C_const[48,2]", "C_const[49,1]", "C_const[49,2]", "C_const[50,1]", "C_const[50,2]", "C_const[51,1]", "C_const[51,2]", "C_const[52,1]", "C_const[52,2]", "C_const[53,1]", "C_const[53,2]", "C_const[54,1]", "C_const[54,2]", "C_const[55,1]", "C_const[55,2]", "C_const[56,1]", "C_const[56,2]", "C_const[57,1]", "C_const[57,2]", "C_const[58,1]", "C_const[58,2]"))
```

## Mean parameter estimates and credible intervals

```{r}
plot(fit, pars=c("mu[1]", "A_sub_m[1]", "A_subj_s", "mu_A"),
     show_density = FALSE, ci_level = 0.5, outer_level = 0.95, fill_color = "salmon")

plot(fit, pars=c("mu[2]", "tau_sub_m[1]", "tau_subj_s", "mu_tau"),
     show_density = FALSE, ci_level = 0.5, outer_level = 0.95, fill_color = "salmon")

plot(fit, pars=c("mu[3]", "gamma_sub_m[1]", "gamma_subj_s", "mu_gamma"),
     show_density = FALSE, ci_level = 0.5, outer_level = 0.95, fill_color = "salmon")

plot(fit, pars=c("mu[4]", "C_sub_m[1]", "C_subj_s", "mu_C"),
     show_density = FALSE, ci_level = 0.5, outer_level = 0.95, fill_color = "salmon")
```

## Probability that each parameter is over / under a certain value of interest

```{r}
posterior <- extract(fit)

sum(posterior$A>0.5)/length(posterior$A)
sum(posterior$tau>50)/length(posterior$tau)
sum(posterior$gamma>0.5)/length(posterior$gamma)
sum(posterior$C_const>0.5)/length(posterior$C_const)
```

# Prior / Posterior predictive checks

## Load real subject data (input for Stan)

```{r}
choice <- stan_data[["choice"]]

# only select trials in which all subjects made a choice; c converts matrix to vector with first index (subject) varying fastest
choice <- c(choice[,1:44,])
```

## Extract simulated values from generated quantities block

```{r}
y_pred <- as.matrix(fit, pars = "y_pred")
y_pred

# create logical vector coding if a column should be included in y_pred
x <- logical(stan_data$T) # create vector containing total number of trials * FALSE
a <- c(1:(stan_data$N*44)) # vector with number from 1 to 71 subjects * 44 trials (for cond. 1)
b <- c(stan_data$N*50+1:(stan_data$N*94-stan_data$N*50)) # vector with numbers from 71 subjects * 50 trials + 1 to 71 subjects * 94 trials (for cond. 2)
c <- c(a,b) # concatenate both number vectors
x[c] <- TRUE # set logical value to TRUE if index in c

# exclude 45:50th trial per subject
y_pred <- y_pred[,x] # include only trials 1:44 for each subject and reinforcer_type
y_pred_m <- colMeans(y_pred)
```

-   3600 (iterations) \* 7100 (71 subjects \* 50 trials \* 2 reinforcer_types) matrix

## Calibration / reliability plot

```{r}
rd <- reliabilitydiag(EMOS = y_pred_m, y = choice)
                      
autoplot(rd) +
  labs(x="Predicted (LOO)",
       y="Conditional event probabilities") +
  bayesplot::theme_default(base_family = "sans", base_size=16)
```

## Compare estimates of summary statistics between choice and predicted choice

```{r}
ppc_stat(y = choice, yrep = y_pred, stat = function(y) mean(y))
```

## Bar plot: count of choices and estimated choices

```{r}
ppc_bars(y = choice, yrep = y_pred)
```

## Trial-by-trial plotting of real and simulated choices

### Prepare data
```{r}
# real data
choice_df <- as.data.frame(choice)
names(choice_df)[1] <- "choice"
choice_df$ID <- rep(unique(behav_final_redcap$ID), times=2*44)
choice_df$aud_group <- rep(stan_data$subj_vars, times=44*2)
choice_df$trial <- rep(rep(c(1:44),each = stan_data$N),times=2)
choice_df$reinforcer_type <- rep(c(0:1), each=stan_data$N*44)

# simulated data
y_pred_df <- as.data.frame(t(y_pred)) # create df containing all iterations seperately
names <- c(seq(1,niterations))
colnames(y_pred_df) <- names
 
y_pred_mean <- summary(fit, pars = "y_pred")$summary[, c("mean")] # create vector containing mean across all iterations
y_pred_mean_jui <- y_pred_mean[c(TRUE,rep(FALSE,1))] # spilt df into jui and alc df
y_pred_mean_alc <- y_pred_mean[c(rep(FALSE,1),TRUE)]
y_pred_mean_jui_summary <- t(matrix(y_pred_mean_jui, nrow = 50)) # subject * trial matrix
y_pred_mean_alc_summary <- t(matrix(y_pred_mean_alc, nrow = 50))
y_pred_mean_jui_summary <- y_pred_mean_jui_summary[,1:44] # exclude NA trials
y_pred_mean_alc_summary <- y_pred_mean_alc_summary[,1:44]
y_pred_mean_summary <- c(array(c(y_pred_mean_jui_summary,y_pred_mean_alc_summary), dim = c(stan_data$N,44,2)))
y_pred_df$mean <- y_pred_mean_summary # combine mean with df containing all iterations seperately

y_pred_sd <- summary(fit, pars = "y_pred")$summary[, c("sd")] # create vector containing sd across all iterations
y_pred_sd_jui <- y_pred_sd[c(TRUE,rep(FALSE,1))] # spilt df into jui and alc df
y_pred_sd_alc <- y_pred_sd[c(rep(FALSE,1),TRUE)]
y_pred_sd_jui_summary <- t(matrix(y_pred_sd_jui, nrow = 50)) # subject * trial matrix
y_pred_sd_alc_summary <- t(matrix(y_pred_sd_alc, nrow = 50))
y_pred_sd_jui_summary <- y_pred_sd_jui_summary[,1:44] # exclude NA trials
y_pred_sd_alc_summary <- y_pred_sd_alc_summary[,1:44]
y_pred_sd_summary <- c(array(c(y_pred_sd_jui_summary,y_pred_sd_alc_summary), dim = c(stan_data$N,44,2)))
y_pred_df$sd <- y_pred_sd_summary # combine mean with df containing all iterations seperately

# combine dfs
choice_y_pred_df <- cbind(choice_df,y_pred_df)

# get p correct per trial for plotting
choice_y_pred_df_trial <- choice_y_pred_df %>%
  group_by(trial) %>%
  summarise_at(vars(choice,mean,sd), list(p_correct = mean), na.rm=T)

# get p correct per block and trial for plotting
choice_y_pred_df_block_trial <- choice_y_pred_df %>%
  group_by(reinforcer_type,trial) %>%
  summarise_at(vars(choice,mean,sd), list(p_correct = mean), na.rm=T)

# get p correct per block and aud group and trial for plotting
choice_y_pred_df_block_trial_group <- choice_y_pred_df %>%
  group_by(aud_group,reinforcer_type,trial) %>%
  summarise_at(vars(choice,mean,sd), list(p_correct = mean), na.rm=T)
```

### Plot across AUD group and reinforcer type
```{r}
fig1 <- ggplot(choice_y_pred_df_trial, aes(x=trial)) +
  geom_line(aes(x=trial, y=mean_p_correct, colour = "mean_p_correct")) +
  geom_line(aes(x=trial, y=choice_p_correct, colour = "choice_p_correct")) +
  geom_ribbon(aes(x=trial, y=mean_p_correct, ymin = mean_p_correct - sd_p_correct, ymax = mean_p_correct + sd_p_correct), fill = "#0072B2", alpha = .2) +
  ylab('% correct') +
  theme_bw(base_size=12)

fig1
```

# Extract parameter estimates

## Alpha per subject and condition

```{r}
# mean across iterations of all chains
A_summary <- as.matrix(summary(fit, pars = "A")$summary[, c("mean")]) 
```

## Inverse temperature per subject and condition

```{r}
# mean across iterations of all chains
tau_summary <- as.matrix(summary(fit, pars = "tau")$summary[, c("mean")]) 
```

## Gamma

```{r}
# mean across iterations of all chains
gamma_summary <- as.matrix(summary(fit, pars = "gamma")$summary[, c("mean")]) 
```

## C

```{r}
# mean across iterations of all chains
C_summary <- as.matrix(summary(fit, pars = "C_const")$summary[, c("mean")]) 
```

## Save parameter estimates together with ID, reinforcer type, aud group information

```{r}
params <- as.data.frame(unique(behav_final_redcap$ID_block))
params$alpha <- A_summary
params$invtemp <- tau_summary
params$gamma <- gamma_summary
params$C <- C_summary
names(params) <- c("ID_block", "alpha", "tau", "gamma", "C")

behav_final_redcap <- behav_final_redcap %>%
  mutate(reinforcer_type = factor(reinforcer_type, levels = c("J","A"))) %>%
  group_by(ID,ID_block,aud_group,reinforcer_type,block) %>%
  summarise_at(vars(correct), list(p_correct = mean), na.rm=T)

params <- merge(behav_final_redcap,params,by="ID_block")
params

if (estimation==1) {
  write.table(params, file=file.path(out_path, paste('Params_PH_withC_red_hierarchical_nortype_', sample, '.txt', sep="")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

# Trial-by-trial quantities

## RPEs

### Extract as parametric modulators

```{r}
# mean across iterations of all chains
PE <- as.matrix(summary(fit, pars = "PE_pred")$summary[, c("mean")])
PE_jui <- PE[c(TRUE,rep(FALSE,1)), ] # spilt df into jui and alc df
PE_alc <- PE[c(rep(FALSE,1),TRUE), ]
PE_jui_summary <- t(matrix(PE_jui, nrow = 50)) # subject * trial matrix
PE_alc_summary <- t(matrix(PE_alc, nrow = 50))
PE_summary <- array(c(PE_jui_summary,PE_alc_summary), dim = c(stan_data$N,50,2)) # combine into subject * trial * condition array
dimnames(PE_summary)[[1]] <- c(unique(params$ID)) # name rows = subject ID

# prepare jui df
PE_jui_summary_df <- as.data.frame(c(t(PE_jui_summary)))
PE_jui_summary_df$ID <- c(rep(unique(params$ID), each=50))
PE_jui_summary_df$trial <- rep(c(1:50), times=stan_data$N)
PE_jui_summary_df$reinforcer_type <- 'J'
PE_jui_summary_df <- PE_jui_summary_df %>%
  rename(PE_pred = "c(t(PE_jui_summary))") %>%
  mutate_at(c('PE_pred'), ~na_if(.,-999))
PE_jui_summary_df$absPE_pred <- abs(PE_jui_summary_df$PE_pred)

# prepare alc df
PE_alc_summary_df <- as.data.frame(c(t(PE_alc_summary)))
PE_alc_summary_df$ID <- c(rep(unique(params$ID), each=50))
PE_alc_summary_df$trial <- rep(c(1:50), times=stan_data$N)
PE_alc_summary_df$reinforcer_type <- 'A'
PE_alc_summary_df <- PE_alc_summary_df %>%
  rename(PE_pred = "c(t(PE_alc_summary))") %>%
  mutate_at(c('PE_pred'), ~na_if(.,-999))
PE_alc_summary_df$absPE_pred <- abs(PE_alc_summary_df$PE_pred)

# combine
PE_summary_df <- rbind(PE_jui_summary_df,PE_alc_summary_df)
PE_summary_df <- merge(PE_summary_df, distinct(behav_final_redcap[, c("ID", "reinforcer_type", "block")]), by=c("ID", "reinforcer_type"))

if (estimation==1) {
  write.table(PE_summary_df, file=file.path(out_path, paste('fmri_PEs_PH_withC_hierarchical_nortype_', sample, '.txt', sep = "")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

### Plot over course of trials

```{r}
# across subjects
PE_summary_per_trial <- PE_summary_df %>%
  group_by(trial,reinforcer_type) %>%
  summarise_at(vars(absPE_pred), list(PE_mean = mean), na.rm=T)

fig_PE_per_trial <- ggplot(PE_summary_per_trial, aes(x=trial, y=PE_mean, group = reinforcer_type)) +
  geom_point() +
  geom_line(aes(color=reinforcer_type)) +
  theme_bw(base_size=12)

fig_PE_per_trial
```

## Chosen Q

### Extract as parametric modulators

```{r}
# mean across iterations of all chains
Q <- as.matrix(summary(fit, pars = "ev_chosen_pred")$summary[, c("mean")])
Q_jui <- Q[c(TRUE,rep(FALSE,1)), ] # spilt df into jui and alc df
Q_alc <- Q[c(rep(FALSE,1),TRUE), ]
Q_jui_summary <- t(matrix(Q_jui, nrow = 50)) # subject * trial matrix
Q_alc_summary <- t(matrix(Q_alc, nrow = 50))
Q_summary <- array(c(Q_jui_summary,Q_alc_summary), dim = c(stan_data$N,50,2)) # combine into subject * trial * condition array
dimnames(Q_summary)[[1]] <- c(unique(params$ID)) # name rows = subject ID

# prepare jui df
Q_jui_summary_df <- as.data.frame(c(t(Q_jui_summary)))
Q_jui_summary_df$ID <- c(rep(unique(params$ID), each=50))
Q_jui_summary_df$trial <- rep(c(1:50), times=stan_data$N)
Q_jui_summary_df$reinforcer_type <- 'J'
Q_jui_summary_df <- Q_jui_summary_df %>%
  rename(Q_pred = "c(t(Q_jui_summary))") %>%
  mutate_at(c('Q_pred'), ~na_if(.,-999))

# prepare alc df
Q_alc_summary_df <- as.data.frame(c(t(Q_alc_summary)))
Q_alc_summary_df$ID <- c(rep(unique(params$ID), each=50))
Q_alc_summary_df$trial <- rep(c(1:50), times=stan_data$N)
Q_alc_summary_df$reinforcer_type <- 'A'
Q_alc_summary_df <- Q_alc_summary_df %>%
  rename(Q_pred = "c(t(Q_alc_summary))") %>%
  mutate_at(c('Q_pred'), ~na_if(.,-999))

# combine
Q_summary_df <- rbind(Q_jui_summary_df,Q_alc_summary_df)
Q_summary_df <- merge(Q_summary_df, distinct(behav_final_redcap[, c("ID", "reinforcer_type", "block")]), by=c("ID", "reinforcer_type"))

if (estimation==1) {
  write.table(Q_summary_df, file=file.path(out_path, paste('fmri_Qs_PH_withC_hierarchical_nortype_', sample, '.txt', sep = "")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

### Plot Q of correct and incorrect choice over course of trials

```{r}
# mean across iterations of all chains
Q_summary_df <- as.data.frame(summary(fit, pars = "ev_pred")$summary[, c("mean")])

Q_incorr_summary_df <- as.data.frame(Q_summary_df[c(TRUE,rep(FALSE,1)), ]) # spilt df into incorrect and correct card
Q_corr_summary_df <- as.data.frame(Q_summary_df[c(rep(FALSE,1),TRUE), ])
Q_incorr_summary_df$choice <- 'incorrect'
Q_corr_summary_df$choice <- 'correct'

Q_incorr_jui_summary_df <- as.data.frame(Q_incorr_summary_df[c(TRUE,rep(FALSE,1)), ]) # spilt df into jui and alc
Q_incorr_jui_summary_df$ID <- c(rep(unique(params$ID), each=50))
Q_incorr_jui_summary_df$trial <- rep(c(1:50), times=stan_data$N)
Q_incorr_jui_summary_df$reinforcer_type<- 'jui'
Q_incorr_jui_summary_df <- Q_incorr_jui_summary_df %>%
  rename(Q_pred = "Q_summary_df[c(TRUE, rep(FALSE, 1)), ]") %>%
  mutate_at(c('Q_pred'), ~na_if(.,-999))

Q_incorr_alc_summary_df <- as.data.frame(Q_incorr_summary_df[c(rep(FALSE,1),TRUE), ])
Q_incorr_alc_summary_df$ID <- c(rep(unique(params$ID), each=50))
Q_incorr_alc_summary_df$trial <- rep(c(1:50), times=stan_data$N)
Q_incorr_alc_summary_df$reinforcer_type<- 'alc'
Q_incorr_alc_summary_df <- Q_incorr_alc_summary_df %>%
  rename(Q_pred = "Q_summary_df[c(TRUE, rep(FALSE, 1)), ]") %>%
  mutate_at(c('Q_pred'), ~na_if(.,-999))

Q_corr_jui_summary_df <- as.data.frame(Q_corr_summary_df[c(TRUE,rep(FALSE,1)), ])
Q_corr_jui_summary_df$ID <- c(rep(unique(params$ID), each=50))
Q_corr_jui_summary_df$trial <- rep(c(1:50), times=stan_data$N)
Q_corr_jui_summary_df$reinforcer_type<- 'jui'
Q_corr_jui_summary_df <- Q_corr_jui_summary_df %>%
  rename(Q_pred = "Q_summary_df[c(rep(FALSE, 1), TRUE), ]") %>%
  mutate_at(c('Q_pred'), ~na_if(.,-999))

Q_corr_alc_summary_df <- as.data.frame(Q_corr_summary_df[c(rep(FALSE,1),TRUE), ])
Q_corr_alc_summary_df$ID <- c(rep(unique(params$ID), each=50))
Q_corr_alc_summary_df$trial <- rep(c(1:50), times=stan_data$N)
Q_corr_alc_summary_df$reinforcer_type<- 'alc'
Q_corr_alc_summary_df <- Q_corr_alc_summary_df %>%
  rename(Q_pred = "Q_summary_df[c(rep(FALSE, 1), TRUE), ]") %>%
  mutate_at(c('Q_pred'), ~na_if(.,-999))

Q_summary_df <- rbind(Q_incorr_jui_summary_df,Q_incorr_alc_summary_df,Q_corr_jui_summary_df,Q_corr_alc_summary_df)

# per choice and trial
Q_summary_per_trial <- Q_summary_df %>%
  group_by(trial,choice) %>%
  summarise_at(vars(Q_pred), list(Q_mean = mean), na.rm=T)

fig_Q_per_trial <- ggplot(Q_summary_per_trial, aes(x=trial, y=Q_mean, group=choice)) +
  geom_line(aes(color=choice)) +
  geom_point() +
  theme_bw(base_size=12)

fig_Q_per_trial

# per choice and trial and reinforcer_type
Q_summary_per_trial_cond <- Q_summary_df %>%
  group_by(trial,choice,reinforcer_type) %>%
  summarise_at(vars(Q_pred), list(Q_mean = mean), na.rm=T)

fig_Q_per_trial_cond <- ggplot(Q_summary_per_trial_cond, aes(x=trial, y=Q_mean, group=choice)) +
  geom_line(aes(color=choice)) +
  geom_point() +
  theme_bw(base_size=12) +
  facet_wrap(~reinforcer_type, scales="fixed")

fig_Q_per_trial_cond

```

## Choice probability of chosen option

### Extract as parametric modulators

```{r}
# mean across iterations of all chains
pc <- as.matrix(summary(fit, pars = "softmax_ev_chosen")$summary[, c("mean")])
pc_jui <- pc[c(TRUE,rep(FALSE,1)), ] # spilt df into jui and alc df
pc_alc <- pc[c(rep(FALSE,1),TRUE), ]
pc_jui_summary <- t(matrix(pc_jui, nrow = 50)) # subject * trial matrix
pc_alc_summary <- t(matrix(pc_alc, nrow = 50))
pc_summary <- array(c(pc_jui_summary,pc_alc_summary), dim = c(stan_data$N,50,2)) # combine into subject * trial * reinforcer_type array
dimnames(pc_summary)[[1]] <- c(unique(params$ID)) # name rows = subject ID

# prepare jui df
pc_jui_summary_df <- as.data.frame(c(t(pc_jui_summary)))
pc_jui_summary_df$ID <- c(rep(unique(params$ID), each=50))
pc_jui_summary_df$trial <- rep(c(1:50), times=stan_data$N)
pc_jui_summary_df$reinforcer_type <- 'J'
pc_jui_summary_df <- pc_jui_summary_df %>%
  rename(pc = "c(t(pc_jui_summary))") %>%
  mutate_at(c('pc'), ~na_if(.,-999))

# prepare alc df
pc_alc_summary_df <- as.data.frame(c(t(pc_alc_summary)))
pc_alc_summary_df$ID <- c(rep(unique(params$ID), each=50))
pc_alc_summary_df$trial <- rep(c(1:50), times=stan_data$N)
pc_alc_summary_df$reinforcer_type <- 'A'
pc_alc_summary_df <- pc_alc_summary_df %>%
  rename(pc = "c(t(pc_alc_summary))") %>%
  mutate_at(c('pc'), ~na_if(.,-999))

pc_summary_df <- rbind(pc_jui_summary_df,pc_alc_summary_df)
pc_summary_df <- merge(pc_summary_df, distinct(behav_final_redcap[, c("ID", "reinforcer_type", "block")]), by=c("ID", "reinforcer_type"))

if (estimation==1) {
  write.table(pc_summary_df, file=file.path(out_path, paste('fmri_choiceprobs_PH_withC_hierarchical_nortype_', sample, '.txt', sep = "")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

### Plot over course of trials

```{r}
# across subjects
pc_summary_per_trial <- pc_summary_df %>%
  group_by(trial,reinforcer_type) %>%
  summarise_at(vars(pc), list(pc_mean = mean), na.rm=T)

fig_pc_per_trial <- ggplot(pc_summary_per_trial, aes(x=trial, y=pc_mean, group = reinforcer_type)) +
  geom_point() +
  geom_line(aes(color=reinforcer_type)) +
  theme_bw(base_size=12)

fig_pc_per_trial
```

## Dynamic learning rate k

### Extract as parametric modulators

```{r}
# mean across iterations of all chains
k <- as.matrix(summary(fit, pars = "k_pred")$summary[, c("mean")])
k_jui <- k[c(TRUE,rep(FALSE,1)), ] # spilt df into jui and alc df
k_alc <- k[c(rep(FALSE,1),TRUE), ]
k_jui_summary <- t(matrix(k_jui, nrow = 50)) # subject * trial matrix
k_alc_summary <- t(matrix(k_alc, nrow = 50))
k_summary <- array(c(k_jui_summary,k_alc_summary), dim = c(stan_data$N,50,2)) # combine into subject * trial * reinforcer_type array
dimnames(k_summary)[[1]] <- c(unique(params$ID)) # name rows = subject ID

# prepare jui df
k_jui_summary_df <- as.data.frame(c(t(k_jui_summary)))
k_jui_summary_df$ID <- c(rep(unique(params$ID), each=50))
k_jui_summary_df$trial <- rep(c(1:50), times=stan_data$N)
k_jui_summary_df$reinforcer_type <- 'J'
k_jui_summary_df <- k_jui_summary_df %>%
  rename(k = "c(t(k_jui_summary))") %>%
  mutate_at(c('k'), ~na_if(.,-999))

# prepare alc df
k_alc_summary_df <- as.data.frame(c(t(k_alc_summary)))
k_alc_summary_df$ID <- c(rep(unique(params$ID), each=50))
k_alc_summary_df$trial <- rep(c(1:50), times=stan_data$N)
k_alc_summary_df$reinforcer_type <- 'A'
k_alc_summary_df <- k_alc_summary_df %>%
  rename(k = "c(t(k_alc_summary))") %>%
  mutate_at(c('k'), ~na_if(.,-999))

k_summary_df <- rbind(k_jui_summary_df,k_alc_summary_df)
k_summary_df <- merge(k_summary_df, distinct(behav_final_redcap[, c("ID", "reinforcer_type", "block")]), by=c("ID", "reinforcer_type"))

if (estimation==1) {
  write.table(k_summary_df, file=file.path(out_path, paste('fmri_ks_PH_withC_red_hierarchical_nortype_', sample, '.txt', sep = "")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

### Plot over course of trials

```{r}
k_summary_per_trial <- k_summary_df %>%
  group_by(trial) %>%
  summarise_at(vars(k), list(k_mean = mean), na.rm=T)

fig_k_per_trial <- ggplot(k_summary_per_trial, aes(x=trial, y=k_mean)) +
  geom_line() +
  geom_point() +
  theme_bw(base_size=12)

fig_k_per_trial
```