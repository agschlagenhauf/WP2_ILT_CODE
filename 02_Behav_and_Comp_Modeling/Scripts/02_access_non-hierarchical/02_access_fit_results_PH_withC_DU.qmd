---
title: "Acces PH withC Model Results"
author: "Milena Musial"
output: html_document
date: '2023-09-24'
format: 
  html:
    embed-resources: true
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
    fig-width: 8
    fig-height: 6
    fig-format: svg
    editor_options: 
    chunk_output_type: console
---

# Setup
```{r}
###### define sample #####

rm(list=ls())

sample <- "n58" # n71, n53, n50
```

```{r}
libs<-c("rstan", "gdata", "bayesplot", "stringr", "dplyr", "ggplot2", "loo", "posterior", "reliabilitydiag")
sapply(libs, require, character.only=TRUE)

datapath <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/WP2_ILT_CODE/02_Behav_and_Comp_Modeling'
out_path <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/WP2_ILT_CODE/02_Behav_and_Comp_Modeling/Output'
behavpath <- '/fast/work/groups/ag_schlagenhauf/B01_FP1_WP2/ILT_DATA'

fit_file <- 'fit_n58_2024-04-12_bandit2arm_delta_PH_withC_DU_estimation1_delta0.99_stepsize0.1.rds'

fit <- readRDS(file.path(out_path, fit_file)) # Stan model output

if (sample == 'n71') {
  load(file.path(behavpath,"Behav/behav_final_redcap_n71.RData")) # Behav and redcap data
  load(file.path(behavpath,"RedCap/redcap_n71.RData")) # redcap data
  input<-read.table(file.path(behavpath, 'Input/Stan_input_n71.txt'), header = T)
  load(file.path(behavpath,"Input/stan_data_bandit2arm_delta_PH_withC_DU_n71.RData"))
} else if (sample == 'n58') {
  load(file.path(behavpath,"Behav/behav_final_redcap_n58.RData")) # Behav and redcap data
  load(file.path(behavpath,"RedCap/redcap_n58.RData")) # redcap data
  input<-read.table(file.path(behavpath, 'Input/Stan_input_n58.txt'), header = T)
  load(file.path(behavpath,"Input/stan_data_bandit2arm_delta_PH_withC_DU_n58.RData"))
} else if (sample == 'n56') {
  load(file.path(behavpath,"Behav/behav_final_redcap_n56.RData")) # Behav and redcap data
  load(file.path(behavpath,"RedCap/redcap_n56.RData")) # redcap data
  input<-read.table(file.path(behavpath, 'Input/Stan_input_n56.txt'), header = T)
  load(file.path(behavpath,"Input/stan_data_bandit2arm_delta_PH_withC_DU_n56.RData"))
} 

color_scheme_set("mix-blue-pink")
```

Load data from prior predictive checks (estimation==0) or from model fitting (estimation==1)?
```{r}
estimation <- 1
```

# Convergence / sampler diagnostics

## Summary statistics for parameters

### Across chains

```{r}
fit_sum <- summary(fit)

# overall summary
print(fit_sum$summary[,9:10])
```

-   All `Rhat` values are \< 1.01, meaning that chains have converged! \`

-   All `n_eff` (measure of the effective sample size) are \> 1/100th (360) or 1/1000th (36) of number of iterations (3600). Anything over an `n_eff` of 100 is usually "fine"

## Bulk effective sample size

```{r}
if (estimation==1) {
  # extract posterior draws
  posterior_mat <- extract(fit, permuted = F)
  
  # define parameter names
  parameter_names <- c("mu_pr[1]", "mu_A", "sigma[1]", "A_pr[20]", "A[20]",
                       "mu_pr[2]", "mu_tau", "sigma[2]", "tau_pr[20]", "tau[20]",
                       "mu_pr[3]", "mu_gamma", "sigma[3]", "gamma_pr[20]", "gamma[20]",
                       "mu_pr[4]", "mu_C", "sigma[4]", "C_pr[20]", "C[20]")
  
  # create vector for bulk ess and fill them up iteratively
  bulk_neff <- c()
  
  for (par in parameter_names) {
    par_mat <- extract_variable_matrix(posterior_mat, variable = par)
    bulk_neff <- append(bulk_neff,ess_bulk(par_mat))
  }
  
  print(min(bulk_neff))
  ess_df <- data.frame(parameter_names,bulk_neff)
  print(ess_df)
  
}
```

## Traceplots of model parameters

```{r}
traceplot(fit, pars=c("mu_pr[1]", "mu_A", "sigma[1]", "A_pr[20]", "A[20]"), inc_warmup=T)

traceplot(fit, pars=c("mu_pr[2]", "mu_tau", "sigma[2]", "tau_pr[20]", "tau[20]"),inc_warmup=T)

traceplot(fit, pars=c("mu_pr[3]", "mu_gamma", "sigma[3]", "gamma_pr[20]", "gamma[20]"),inc_warmup=T)

traceplot(fit, pars=c("mu_pr[4]", "mu_C", "sigma[4]", "C_pr[20]", "C[20]"),inc_warmup=T)
```

## Acceptance rate and tree depth per chain

```{r}
sampler_params<- get_sampler_params(fit, inc_warmup=FALSE)

mean_accept_stat_by_chain<-sapply(sampler_params, function(x) mean(x[, "accept_stat__"]))
print(mean_accept_stat_by_chain)

max_treedepth_by_chain <- sapply(sampler_params, function(x) max(x[, "treedepth__"]))
print(max_treedepth_by_chain)
```

# Model fit (Log Likelihood)

```{r}
if (estimation==1) {
  # extract log likelihood for each choice
  log_likelihood <- extract_log_lik(fit, parameter_name = "log_lik", merge_chains = TRUE)
  
  # create logical vector coding if a column should be included in log_likelihood
  x <- logical(stan_data$T) # create vector containing total number of trials * FALSE
  a <- c(stan_data$N+1:(stan_data$N*49)) # vector with number from 1 to 71 subjects * 44 trials (for cond. 1)
  x[a] <- TRUE # set logical value to TRUE if index in c
  
  # exclude 1st trial per subject as likelihood is identical and hinders loo estimation (causes Inf pareto k values)
  log_likelihood <- log_likelihood[,x] # include only trials 1:44 for each subject and reinforcer_type

  # exclude missing trials
  log_likelihood <- log_likelihood[,log_likelihood[1,]!=-999]

  # save for model comparison
  write.table(log_likelihood, file=file.path(out_path, 'log_lik_PH_withC.txt'), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = F)
  
  # print and plot loo
  loo1 <- loo(log_likelihood)
  print(loo1)
  plot(loo1, label_points = TRUE)
  
  waic1 <- waic(log_likelihood)
  print(waic1)
}
```

## Per block and subject 

```{r}
if (estimation==1) {
  # extract log likelihood for each choice
  log_likelihood_s <- extract_log_lik(fit, parameter_name = "log_lik_s", merge_chains = TRUE)
  
  # save for model comparison
  # write.table(log_likelihood, file=file.path(out_path, 'log_lik_s_PH_withC_hierarchical.txt'), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = F)

  # print and plot loo
  loo3 <- loo(log_likelihood_s)
  print(loo3)
  plot(loo3, label_points = TRUE)
  
  waic3 <- waic(log_likelihood_s)
  print(waic3)
}
```

# Inspect posteriors

## Posterior densities & histograms

### Directly estimated parameters

```{r, fig.width=10, fig.height=20}
stan_hist(fit, pars=c("mu_pr[1]", "sigma[1]", "A_pr[1]", "A_pr[2]", "A_pr[3]", "A_pr[4]", "A_pr[5]", "A_pr[6]", "A_pr[7]", "A_pr[8]", "A_pr[9]", "A_pr[10]", "A_pr[11]", "A_pr[12]", "A_pr[13]", "A_pr[14]", "A_pr[15]", "A_pr[16]", "A_pr[17]", "A_pr[18]", "A_pr[19]", "A_pr[20]", "A_pr[21]", "A_pr[22]", "A_pr[23]", "A_pr[24]", "A_pr[25]", "A_pr[21]", "A_pr[22]", "A_pr[23]", "A_pr[24]", "A_pr[25]", "A_pr[26]", "A_pr[27]", "A_pr[28]", "A_pr[29]", "A_pr[30]", "A_pr[31]", "A_pr[32]", "A_pr[33]", "A_pr[34]", "A_pr[35]", "A_pr[36]", "A_pr[37]", "A_pr[38]", "A_pr[39]", "A_pr[40]", "A_pr[41]", "A_pr[42]", "A_pr[43]", "A_pr[44]", "A_pr[45]", "A_pr[46]", "A_pr[47]", "A_pr[48]", "A_pr[49]", "A_pr[50]", "A_pr[51]", "A_pr[52]", "A_pr[53]", "A_pr[54]", "A_pr[55]", "A_pr[56]", "A_pr[57]", "A_pr[58]", "A_pr[59]", "A_pr[60]", "A_pr[61]", "A_pr[62]", "A_pr[63]", "A_pr[64]", "A_pr[65]", "A_pr[66]", "A_pr[67]", "A_pr[68]", "A_pr[69]", "A_pr[70]", "A_pr[71]", "A_pr[72]", "A_pr[73]", "A_pr[74]", "A_pr[75]", "A_pr[76]", "A_pr[77]", "A_pr[78]", "A_pr[79]", "A_pr[80]", "A_pr[81]", "A_pr[82]", "A_pr[83]", "A_pr[84]", "A_pr[85]", "A_pr[86]", "A_pr[87]", "A_pr[88]", "A_pr[89]", "A_pr[90]", "A_pr[91]", "A_pr[92]", "A_pr[93]", "A_pr[94]", "A_pr[95]", "A_pr[96]", "A_pr[97]", "A_pr[98]", "A_pr[99]", "A_pr[100]", "A_pr[101]", "A_pr[102]", "A_pr[103]", "A_pr[104]", "A_pr[105]", "A_pr[106]", "A_pr[107]", "A_pr[108]", "A_pr[109]", "A_pr[110]", "A_pr[111]", "A_pr[112]", "A_pr[113]", "A_pr[114]", "A_pr[115]", "A_pr[116]"))
          
stan_hist(fit, pars=c("mu_pr[2]", "sigma[2]",  "tau_pr[1]", "tau_pr[2]", "tau_pr[3]", "tau_pr[4]", "tau_pr[5]", "tau_pr[6]", "tau_pr[7]", "tau_pr[8]", "tau_pr[9]", "tau_pr[10]", "tau_pr[11]", "tau_pr[12]", "tau_pr[13]", "tau_pr[14]", "tau_pr[15]", "tau_pr[16]", "tau_pr[17]", "tau_pr[18]", "tau_pr[19]", "tau_pr[20]", "tau_pr[21]", "tau_pr[22]", "tau_pr[23]", "tau_pr[24]", "tau_pr[25]", "tau_pr[21]", "tau_pr[22]", "tau_pr[23]", "tau_pr[24]", "tau_pr[25]", "tau_pr[26]", "tau_pr[27]", "tau_pr[28]", "tau_pr[29]", "tau_pr[30]", "tau_pr[31]", "tau_pr[32]", "tau_pr[33]", "tau_pr[34]", "tau_pr[35]", "tau_pr[36]", "tau_pr[37]", "tau_pr[38]", "tau_pr[39]", "tau_pr[40]", "tau_pr[41]", "tau_pr[42]", "tau_pr[43]", "tau_pr[44]", "tau_pr[45]", "tau_pr[46]", "tau_pr[47]", "tau_pr[48]", "tau_pr[49]", "tau_pr[50]", "tau_pr[51]", "tau_pr[52]", "tau_pr[53]", "tau_pr[54]", "tau_pr[55]", "tau_pr[56]", "tau_pr[57]", "tau_pr[58]", "tau_pr[59]", "tau_pr[60]", "tau_pr[61]", "tau_pr[62]", "tau_pr[63]", "tau_pr[64]", "tau_pr[65]", "tau_pr[66]", "tau_pr[67]", "tau_pr[68]", "tau_pr[69]", "tau_pr[70]", "tau_pr[71]", "tau_pr[72]", "tau_pr[73]", "tau_pr[74]", "tau_pr[75]", "tau_pr[76]", "tau_pr[77]", "tau_pr[78]", "tau_pr[79]", "tau_pr[80]", "tau_pr[81]", "tau_pr[82]", "tau_pr[83]", "tau_pr[84]", "tau_pr[85]", "tau_pr[86]", "tau_pr[87]", "tau_pr[88]", "tau_pr[89]", "tau_pr[90]", "tau_pr[91]", "tau_pr[92]", "tau_pr[93]", "tau_pr[94]", "tau_pr[95]", "tau_pr[96]", "tau_pr[97]", "tau_pr[98]", "tau_pr[99]", "tau_pr[100]", "tau_pr[101]", "tau_pr[102]", "tau_pr[103]", "tau_pr[104]", "tau_pr[105]", "tau_pr[106]", "tau_pr[107]", "tau_pr[108]", "tau_pr[109]", "tau_pr[110]", "tau_pr[111]", "tau_pr[112]", "tau_pr[113]", "tau_pr[114]", "tau_pr[115]", "tau_pr[116]"))

stan_hist(fit, pars=c("mu_pr[3]", "sigma[3]",  "gamma_pr[1]", "gamma_pr[2]", "gamma_pr[3]", "gamma_pr[4]", "gamma_pr[5]", "gamma_pr[6]", "gamma_pr[7]", "gamma_pr[8]", "gamma_pr[9]", "gamma_pr[10]", "gamma_pr[11]", "gamma_pr[12]", "gamma_pr[13]", "gamma_pr[14]", "gamma_pr[15]", "gamma_pr[16]", "gamma_pr[17]", "gamma_pr[18]", "gamma_pr[19]", "gamma_pr[20]", "gamma_pr[21]", "gamma_pr[22]", "gamma_pr[23]", "gamma_pr[24]", "gamma_pr[25]", "gamma_pr[21]", "gamma_pr[22]", "gamma_pr[23]", "gamma_pr[24]", "gamma_pr[25]", "gamma_pr[26]", "gamma_pr[27]", "gamma_pr[28]", "gamma_pr[29]", "gamma_pr[30]", "gamma_pr[31]", "gamma_pr[32]", "gamma_pr[33]", "gamma_pr[34]", "gamma_pr[35]", "gamma_pr[36]", "gamma_pr[37]", "gamma_pr[38]", "gamma_pr[39]", "gamma_pr[40]", "gamma_pr[41]", "gamma_pr[42]", "gamma_pr[43]", "gamma_pr[44]", "gamma_pr[45]", "gamma_pr[46]", "gamma_pr[47]", "gamma_pr[48]", "gamma_pr[49]", "gamma_pr[50]", "gamma_pr[51]", "gamma_pr[52]", "gamma_pr[53]", "gamma_pr[54]", "gamma_pr[55]", "gamma_pr[56]", "gamma_pr[57]", "gamma_pr[58]", "gamma_pr[59]", "gamma_pr[60]", "gamma_pr[61]", "gamma_pr[62]", "gamma_pr[63]", "gamma_pr[64]", "gamma_pr[65]", "gamma_pr[66]", "gamma_pr[67]", "gamma_pr[68]", "gamma_pr[69]", "gamma_pr[70]", "gamma_pr[71]", "gamma_pr[72]", "gamma_pr[73]", "gamma_pr[74]", "gamma_pr[75]", "gamma_pr[76]", "gamma_pr[77]", "gamma_pr[78]", "gamma_pr[79]", "gamma_pr[80]", "gamma_pr[81]", "gamma_pr[82]", "gamma_pr[83]", "gamma_pr[84]", "gamma_pr[85]", "gamma_pr[86]", "gamma_pr[87]", "gamma_pr[88]", "gamma_pr[89]", "gamma_pr[90]", "gamma_pr[91]", "gamma_pr[92]", "gamma_pr[93]", "gamma_pr[94]", "gamma_pr[95]", "gamma_pr[96]", "gamma_pr[97]", "gamma_pr[98]", "gamma_pr[99]", "gamma_pr[100]", "gamma_pr[101]", "gamma_pr[102]", "gamma_pr[103]", "gamma_pr[104]", "gamma_pr[105]", "gamma_pr[106]", "gamma_pr[107]", "gamma_pr[108]", "gamma_pr[109]", "gamma_pr[110]", "gamma_pr[111]", "gamma_pr[112]", "gamma_pr[113]", "gamma_pr[114]", "gamma_pr[115]", "gamma_pr[116]"))

stan_hist(fit, pars=c("mu_pr[4]", "sigma[4]",  "C_pr[1]", "C_pr[2]", "C_pr[3]", "C_pr[4]", "C_pr[5]", "C_pr[6]", "C_pr[7]", "C_pr[8]", "C_pr[9]", "C_pr[10]", "C_pr[11]", "C_pr[12]", "C_pr[13]", "C_pr[14]", "C_pr[15]", "C_pr[16]", "C_pr[17]", "C_pr[18]", "C_pr[19]", "C_pr[20]", "C_pr[21]", "C_pr[22]", "C_pr[23]", "C_pr[24]", "C_pr[25]", "C_pr[21]", "C_pr[22]", "C_pr[23]", "C_pr[24]", "C_pr[25]", "C_pr[26]", "C_pr[27]", "C_pr[28]", "C_pr[29]", "C_pr[30]", "C_pr[31]", "C_pr[32]", "C_pr[33]", "C_pr[34]", "C_pr[35]", "C_pr[36]", "C_pr[37]", "C_pr[38]", "C_pr[39]", "C_pr[40]", "C_pr[41]", "C_pr[42]", "C_pr[43]", "C_pr[44]", "C_pr[45]", "C_pr[46]", "C_pr[47]", "C_pr[48]", "C_pr[49]", "C_pr[50]", "C_pr[51]", "C_pr[52]", "C_pr[53]", "C_pr[54]", "C_pr[55]", "C_pr[56]", "C_pr[57]", "C_pr[58]", "C_pr[59]", "C_pr[60]", "C_pr[61]", "C_pr[62]", "C_pr[63]", "C_pr[64]", "C_pr[65]", "C_pr[66]", "C_pr[67]", "C_pr[68]", "C_pr[69]", "C_pr[70]", "C_pr[71]", "C_pr[72]", "C_pr[73]", "C_pr[74]", "C_pr[75]", "C_pr[76]", "C_pr[77]", "C_pr[78]", "C_pr[79]", "C_pr[80]", "C_pr[81]", "C_pr[82]", "C_pr[83]", "C_pr[84]", "C_pr[85]", "C_pr[86]", "C_pr[87]", "C_pr[88]", "C_pr[89]", "C_pr[90]", "C_pr[91]", "C_pr[92]", "C_pr[93]", "C_pr[94]", "C_pr[95]", "C_pr[96]", "C_pr[97]", "C_pr[98]", "C_pr[99]", "C_pr[100]", "C_pr[101]", "C_pr[102]", "C_pr[103]", "C_pr[104]", "C_pr[105]", "C_pr[106]", "C_pr[107]", "C_pr[108]", "C_pr[109]", "C_pr[110]", "C_pr[111]", "C_pr[112]", "C_pr[113]", "C_pr[114]", "C_pr[115]", "C_pr[116]"))
          
```

### Transformed parameters

```{r, fig.width=10, fig.height=20}
stan_hist(fit, pars=c("mu_A", "A[1]", "A[2]", "A[3]", "A[4]", "A[5]", "A[6]", "A[7]", "A[8]", "A[9]", "A[10]", "A[11]", "A[12]", "A[13]", "A[14]", "A[15]", "A[16]", "A[17]", "A[18]", "A[19]", "A[20]", "A[21]", "A[22]", "A[23]", "A[24]", "A[25]", "A[26]", "A[27]", "A[28]", "A[29]", "A[30]", "A[31]", "A[32]", "A[33]", "A[34]", "A[35]", "A[36]", "A[37]", "A[38]", "A[39]", "A[40]", "A[41]", "A[42]", "A[43]", "A[44]", "A[45]", "A[46]", "A[47]", "A[48]", "A[49]", "A[50]", "A[51]", "A[52]", "A[53]", "A[54]", "A[55]", "A[56]", "A[57]", "A[58]", "A[59]", "A[60]", "A[61]", "A[62]", "A[63]", "A[64]", "A[65]", "A[66]", "A[67]", "A[68]", "A[69]", "A[70]", "A[71]", "A[72]", "A[73]", "A[74]", "A[75]", "A[76]", "A[77]", "A[78]", "A[79]", "A[80]", "A[81]", "A[82]", "A[83]", "A[84]", "A[85]", "A[86]", "A[87]", "A[88]", "A[89]", "A[90]", "A[91]", "A[92]", "A[93]", "A[94]", "A[95]", "A[96]", "A[97]", "A[98]", "A[99]", "A[100]", "A[101]", "A[102]", "A[103]", "A[104]", "A[105]", "A[106]", "A[107]", "A[108]", "A[109]", "A[110]", "A[111]", "A[112]", "A[113]", "A[114]", "A[115]", "A[116]"))
          
stan_hist(fit, pars=c("mu_tau", "tau[1]", "tau[2]", "tau[3]", "tau[4]", "tau[5]", "tau[6]", "tau[7]", "tau[8]", "tau[9]", "tau[10]", "tau[11]", "tau[12]", "tau[13]", "tau[14]", "tau[15]", "tau[16]", "tau[17]", "tau[18]", "tau[19]", "tau[20]", "tau[21]", "tau[22]", "tau[23]", "tau[24]", "tau[25]", "tau[26]", "tau[27]", "tau[28]", "tau[29]", "tau[30]", "tau[31]", "tau[32]", "tau[33]", "tau[34]", "tau[35]", "tau[36]", "tau[37]", "tau[38]", "tau[39]", "tau[40]", "tau[41]", "tau[42]", "tau[43]", "tau[44]", "tau[45]", "tau[46]", "tau[47]", "tau[48]", "tau[49]", "tau[50]", "tau[51]", "tau[52]", "tau[53]", "tau[54]", "tau[55]", "tau[56]", "tau[57]", "tau[58]", "tau[59]", "tau[60]", "tau[61]", "tau[62]", "tau[63]", "tau[64]", "tau[65]", "tau[66]", "tau[67]", "tau[68]", "tau[69]", "tau[70]", "tau[71]", "tau[72]", "tau[73]", "tau[74]", "tau[75]", "tau[76]", "tau[77]", "tau[78]", "tau[79]", "tau[80]", "tau[81]", "tau[82]", "tau[83]", "tau[84]", "tau[85]", "tau[86]", "tau[87]", "tau[88]", "tau[89]", "tau[90]", "tau[91]", "tau[92]", "tau[93]", "tau[94]", "tau[95]", "tau[96]", "tau[97]", "tau[98]", "tau[99]", "tau[100]", "tau[101]", "tau[102]", "tau[103]", "tau[104]", "tau[105]", "tau[106]", "tau[107]", "tau[108]", "tau[109]", "tau[110]", "tau[111]", "tau[112]", "tau[113]", "tau[114]", "tau[115]", "tau[116]"))

stan_hist(fit, pars=c("mu_gamma", "gamma[1]", "gamma[2]", "gamma[3]", "gamma[4]", "gamma[5]", "gamma[6]", "gamma[7]", "gamma[8]", "gamma[9]", "gamma[10]", "gamma[11]", "gamma[12]", "gamma[13]", "gamma[14]", "gamma[15]", "gamma[16]", "gamma[17]", "gamma[18]", "gamma[19]", "gamma[20]", "gamma[21]", "gamma[22]", "gamma[23]", "gamma[24]", "gamma[25]", "gamma[26]", "gamma[27]", "gamma[28]", "gamma[29]", "gamma[30]", "gamma[31]", "gamma[32]", "gamma[33]", "gamma[34]", "gamma[35]", "gamma[36]", "gamma[37]", "gamma[38]", "gamma[39]", "gamma[40]", "gamma[41]", "gamma[42]", "gamma[43]", "gamma[44]", "gamma[45]", "gamma[46]", "gamma[47]", "gamma[48]", "gamma[49]", "gamma[50]", "gamma[51]", "gamma[52]", "gamma[53]", "gamma[54]", "gamma[55]", "gamma[56]", "gamma[57]", "gamma[58]", "gamma[59]", "gamma[60]", "gamma[61]", "gamma[62]", "gamma[63]", "gamma[64]", "gamma[65]", "gamma[66]", "gamma[67]", "gamma[68]", "gamma[69]", "gamma[70]", "gamma[71]", "gamma[72]", "gamma[73]", "gamma[74]", "gamma[75]", "gamma[76]", "gamma[77]", "gamma[78]", "gamma[79]", "gamma[80]", "gamma[81]", "gamma[82]", "gamma[83]", "gamma[84]", "gamma[85]", "gamma[86]", "gamma[87]", "gamma[88]", "gamma[89]", "gamma[90]", "gamma[91]", "gamma[92]", "gamma[93]", "gamma[94]", "gamma[95]", "gamma[96]", "gamma[97]", "gamma[98]", "gamma[99]", "gamma[100]", "gamma[101]", "gamma[102]", "gamma[103]", "gamma[104]", "gamma[105]", "gamma[106]", "gamma[107]", "gamma[108]", "gamma[109]", "gamma[110]", "gamma[111]", "gamma[112]", "gamma[113]", "gamma[114]", "gamma[115]", "gamma[116]"))

stan_hist(fit, pars=c("mu_C", "C[1]", "C[2]", "C[3]", "C[4]", "C[5]", "C[6]", "C[7]", "C[8]", "C[9]", "C[10]", "C[11]", "C[12]", "C[13]", "C[14]", "C[15]", "C[16]", "C[17]", "C[18]", "C[19]", "C[20]", "C[21]", "C[22]", "C[23]", "C[24]", "C[25]", "C[26]", "C[27]", "C[28]", "C[29]", "C[30]", "C[31]", "C[32]", "C[33]", "C[34]", "C[35]", "C[36]", "C[37]", "C[38]", "C[39]", "C[40]", "C[41]", "C[42]", "C[43]", "C[44]", "C[45]", "C[46]", "C[47]", "C[48]", "C[49]", "C[50]", "C[51]", "C[52]", "C[53]", "C[54]", "C[55]", "C[56]", "C[57]", "C[58]", "C[59]", "C[60]", "C[61]", "C[62]", "C[63]", "C[64]", "C[65]", "C[66]", "C[67]", "C[68]", "C[69]", "C[70]", "C[71]", "C[72]", "C[73]", "C[74]", "C[75]", "C[76]", "C[77]", "C[78]", "C[79]", "C[80]", "C[81]", "C[82]", "C[83]", "C[84]", "C[85]", "C[86]", "C[87]", "C[88]", "C[89]", "C[90]", "C[91]", "C[92]", "C[93]", "C[94]", "C[95]", "C[96]", "C[97]", "C[98]", "C[99]", "C[100]", "C[101]", "C[102]", "C[103]", "C[104]", "C[105]", "C[106]", "C[107]", "C[108]", "C[109]", "C[110]", "C[111]", "C[112]", "C[113]", "C[114]", "C[115]", "C[116]"))
```
## Mean parameter estimates and credible intervals

```{r}
plot(fit, pars=c("mu_pr[1]", "mu_A", "sigma[1]",
                       "mu_pr[2]", "mu_tau", "sigma[2]",
                       "mu_pr[3]", "mu_gamma", "sigma[3]",
                       "mu_pr[4]", "mu_C", "sigma[4]"), 
     show_density = FALSE, ci_level = 0.5, outer_level = 0.95, fill_color = "salmon")
```

## Probability that each parameter is over / under a certain value of interest

```{r}
posterior_list <- extract(fit, permuted = T)

sum(posterior_list$A>0.5)/length(posterior_list$A)
sum(posterior_list$tau>50)/length(posterior_list$tau)
sum(posterior_list$gamma>0.5)/length(posterior_list$gamma)
sum(posterior_list$C>0.5)/length(posterior_list$C)
```

# Prior / Posterior predictive checks

## Load real subject data (input for Stan)

```{r}
choice <- stan_data[["choice"]]

# only select trials in which all subjects made a choice
choice <- c(choice[,1:44])
```

## Extract simulated values from generated quantities block

```{r}
y_pred <- as.matrix(fit, pars = "y_pred")

# create logical vector coding if a column should be included in y_pred
x <- logical(stan_data$T)
a <- c(1:(stan_data$N*44))
x[a] <- TRUE

# exclude 48:50th trial per subject
y_pred <- y_pred[,x]
y_pred_m <- colMeans(y_pred)
```

## Calibration / reliability plot

```{r}
rd <- reliabilitydiag(EMOS = y_pred_m, y = choice)
                      
autoplot(rd) +
  labs(x="Predicted (LOO)",
       y="Conditional event probabilities") +
  bayesplot::theme_default(base_family = "sans", base_size=16)
```

## Compare estimates of summary statistics between choice and predicted choice

```{r}
ppc_stat(y = choice, yrep = y_pred, stat = function(y) mean(y, na.rm=T))
```

## Bar plot: count of choices and estimated choices

```{r}
ppc_bars(y = choice, yrep = y_pred)
```

## Trial-by-trial plotting of real and simulated choices

### Prepare data
```{r}
# real data
choice_df <- as.data.frame(choice)
names(choice_df)[1] <- "choice"
choice_df$ID <- rep(unique(input$subjID), times=44)
choice_df$trial <- rep(c(1:44),each = stan_data$N)

# simulated data
y_pred_df <- as.data.frame(t(y_pred)) # create df containing all iterations seperately
names <- c(seq(1,36000))
colnames(y_pred_df) <- names
 
y_pred_mean <- summary(fit, pars = "y_pred")$summary[, c("mean")] # create vector containing mean across all iterations

y_pred_mean_summary <- t(matrix(y_pred_mean, nrow = 50)) # subject * trial matrix
y_pred_mean_summary <- y_pred_mean_summary[,1:44] # exclude NA trials

y_pred_df$mean <- c(y_pred_mean_summary) # combine mean with df containing all iterations seperately

y_pred_sd <- summary(fit, pars = "y_pred")$summary[, c("sd")] # create vector containing sd across all iterations

y_pred_sd_summary <- t(matrix(y_pred_sd, nrow = 50)) # subject * trial matrix
y_pred_sd_summary <- y_pred_sd_summary[,1:44] # exclude NA trials

y_pred_df$sd <- c(y_pred_sd_summary) # combine mean with df containing all iterations seperately

# combine dfs
choice_y_pred_df <- cbind(choice_df,y_pred_df)

# get p correct per trial for plotting
choice_y_pred_df_trial <- choice_y_pred_df %>%
  group_by(trial) %>%
  summarise_at(vars(choice,mean,sd), list(p_correct = mean), na.rm=T)
```

### Plot across AUD group and reinforcer type
```{r}
fig1 <- ggplot(choice_y_pred_df_trial, aes(x=trial)) +
  geom_line(aes(x=trial, y=mean_p_correct, colour = "mean_p_correct")) +
  geom_line(aes(x=trial, y=choice_p_correct, colour = "choice_p_correct")) +
  geom_ribbon(aes(x=trial, y=mean_p_correct, ymin = mean_p_correct - sd_p_correct, ymax = mean_p_correct + sd_p_correct), fill = "#0072B2", alpha = .2) +
  ylab('% correct') +
  theme_bw(base_size=12)

fig1
```

# Extract parameter estimates

## Alpha per subject

```{r}
# mean across iterations of all chains
A_summary <- as.matrix(summary(fit, pars = "A")$summary[, c("mean")]) 
```

## Inverse temperature per subject

```{r}
# mean across iterations of all chains
tau_summary <- as.matrix(summary(fit, pars = "tau")$summary[, c("mean")]) 
```

## Gamma per subject

```{r}
# mean across iterations of all chains
gamma_summary <- as.matrix(summary(fit, pars = "gamma")$summary[, c("mean")]) 
```

## C per subject

```{r}
# mean across iterations of all chains
C_summary <- as.matrix(summary(fit, pars = "C")$summary[, c("mean")]) 
```

## Save parameter estimates together with ID, reinforcer type, aud group information

```{r}
params <- as.data.frame(unique(behav_final_redcap$ID_block))
params$alpha <- A_summary
params$invtemp <- tau_summary
params$gamma <- gamma_summary
params$C <- C_summary
names(params) <- c("ID_block", "alpha", "tau", "gamma", "C")

demo_behav <- behav_final_redcap %>%
  mutate(reinforcer_type = factor(reinforcer_type, levels = c("J","A"))) %>%
  group_by(ID,ID_block,aud_group,reinforcer_type,block) %>%
  summarise_at(vars(correct), list(p_correct = mean), na.rm=T)

params <- merge(demo_behav,params,by="ID_block")
params

if (estimation==1) {
  write.table(params, file=file.path(out_path, paste('Params_PH_withC_DU_', sample, '.txt', sep="")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

# Trial-by-trial quantities (can be used as fMRI parametric modulators)

## RPEs

### Extract as parametric modulators

```{r}
# mean across iterations of all chains
PE_summary <- as.data.frame(summary(fit, pars = "PE_pred")$summary[, c("mean")])
PE_summary <- PE_summary %>%
  rename(PE_pred = `summary(fit, pars = "PE_pred")$summary[, c("mean")]`) %>%
  mutate_at(c('PE_pred'), ~na_if(., -999))
PE_summary$ID_block <- behav_final_redcap$ID_block
PE_summary$trial_block <- behav_final_redcap$trial_block
PE_summary$ID <- behav_final_redcap$ID
PE_summary$reinforcer_type <- behav_final_redcap$reinforcer_type

if (estimation==1) {
  write.table(PE_summary, file=file.path(out_path, paste('fmri_PEs_PH_withC_DU_', sample, '.txt', sep="")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

### Plot over course of trials

```{r}
# across subjects
PE_summary_per_trial <- PE_summary %>%
  group_by(trial_block) %>%
  summarise_at(vars(PE_pred), list(PE_mean = mean), na.rm=T)

fig_PE_per_trial <- ggplot(PE_summary_per_trial, aes(x=trial_block, y=PE_mean)) +
  geom_point() +
  geom_line() +
  theme_bw(base_size=12)

fig_PE_per_trial
```

## Chosen Q

### Extract as parametric modulators

```{r}
# mean across iterations of all chains
Q_summary <- as.data.frame(summary(fit, pars = "ev_chosen_pred")$summary[, c("mean")])
Q_summary <- Q_summary %>%
  rename(Q_pred = `summary(fit, pars = "ev_chosen_pred")$summary[, c("mean")]`) %>%
  mutate_at(c('Q_pred'), ~na_if(., -999))
Q_summary$ID_block <- behav_final_redcap$ID_block
Q_summary$trial_block <- behav_final_redcap$trial_block
Q_summary$ID <- behav_final_redcap$ID
Q_summary$reinforcer_type <- behav_final_redcap$reinforcer_type

if (estimation==1) {
  write.table(Q_summary, file=file.path(out_path, paste('fmri_Qs_PH_withC_DU_', sample, '.txt', sep="")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

### Plot over course of trials

Currently trying to plot Q values of better and worse card separately over course of trials.

```{r}
# mean across iterations of all chains
Q_summary <- as.data.frame(summary(fit, pars = "ev_pred")$summary[, c("mean")])

Q_incorr_summary <- as.data.frame(Q_summary[c(TRUE,rep(FALSE,1)), ]) # spilt df into incorrect and correct card
names(Q_incorr_summary) <- "Q_pred"
Q_corr_summary <- as.data.frame(Q_summary[c(rep(FALSE,1),TRUE), ])
names(Q_corr_summary) <- "Q_pred"

Q_incorr_summary$choice <- 'incorrect'
Q_corr_summary$choice <- 'correct'

Q_incorr_summary <- Q_incorr_summary %>%
  mutate_at(c('Q_pred'), ~na_if(., -999))
Q_corr_summary <- Q_corr_summary %>%
  mutate_at(c('Q_pred'), ~na_if(., -999))

Q_incorr_summary$ID_block <- behav_final_redcap$ID_block
Q_corr_summary$ID_block <- behav_final_redcap$ID_block
Q_incorr_summary$trial_block <- behav_final_redcap$trial_block
Q_corr_summary$trial_block <- behav_final_redcap$trial_block
Q_incorr_summary$ID <- behav_final_redcap$ID
Q_corr_summary$ID <- behav_final_redcap$ID
Q_incorr_summary$reinforcer_type <- behav_final_redcap$reinforcer_type
Q_corr_summary$reinforcer_type <- behav_final_redcap$reinforcer_type

Q_summary <- rbind(Q_incorr_summary,Q_corr_summary)

# per choice and trial
Q_summary_per_trial <- Q_summary %>%
  group_by(trial_block,choice) %>%
  summarise_at(vars(Q_pred), list(Q_mean = mean), na.rm=T)

fig_Q_per_trial <- ggplot(Q_summary_per_trial, aes(x=trial_block, y=Q_mean, group=choice)) +
  geom_line(aes(color=choice)) +
  geom_point() +
  theme_bw(base_size=12)

fig_Q_per_trial

# per choice and trial and condition
Q_summary_per_trial_cond <- Q_summary %>%
  group_by(trial_block,choice,reinforcer_type) %>%
  summarise_at(vars(Q_pred), list(Q_mean = mean), na.rm=T)

fig_Q_per_trial_cond <- ggplot(Q_summary_per_trial_cond, aes(x=trial_block, y=Q_mean, group=choice)) +
  geom_line(aes(color=choice)) +
  geom_point() +
  theme_bw(base_size=12) +
  facet_wrap(~reinforcer_type, scales="fixed")

fig_Q_per_trial_cond

```

## Choice probability of chosen option

### Extract as parametric modulators

```{r}
# mean across iterations of all chains
pc_summary <- as.data.frame(summary(fit, pars = "softmax_ev_chosen")$summary[, c("mean")])
pc_summary <- pc_summary %>%
  rename(pc_pred = `summary(fit, pars = "softmax_ev_chosen")$summary[, c("mean")]`) %>%
  mutate_at(c('pc_pred'), ~na_if(., -999))
pc_summary$ID_block <- behav_final_redcap$ID_block
pc_summary$trial_block <- behav_final_redcap$trial_block
pc_summary$ID <- behav_final_redcap$ID
pc_summary$reinforcer_type <- behav_final_redcap$reinforcer_type

if (estimation==1) {
  write.table(pc_summary, file=file.path(out_path, paste('fmri_pcs_PH_withC_DU_', sample, '.txt', sep="")), append = FALSE, sep = " ", dec = ".", row.names = F, col.names = T)
}
```

### Plot over course of trials

```{r}
# across subjects
pc_summary_per_trial <- pc_summary %>%
  group_by(trial_block,reinforcer_type) %>%
  summarise_at(vars(pc_pred), list(pc_mean = mean), na.rm=T)

fig_pc_per_trial <- ggplot(pc_summary_per_trial, aes(x=trial_block, y=pc_mean, group = reinforcer_type)) +
  geom_point() +
  geom_line(aes(color=reinforcer_type)) +
  theme_bw(base_size=12)

fig_pc_per_trial
```
